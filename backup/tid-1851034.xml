<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧</title>
    <link>https://bbs.saraba1st.com/2b/</link>
    <description>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 09 Jul 2020 18:34:33 +0000</lastBuildDate>
    <item>
      <title>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧[50-100]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1851034-1-1.html</link>
      <description>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧&#13;
 本帖最后由 CAMUS.net 于 2019-8-3 13:11 编辑 

一起来学python吧，一个人学习python太无聊了！
&#13;
离线官方中文方档
&#13;
HTML
&#13;
https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-html.zip
&#13;
PDF
&#13;
https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-pdf-letter.zip
&#13;
离线官方英文方档
&#13;
HTML
&#13;
https://docs.python.org/3/archives/python-3.7.4-docs-html.zip
&#13;
PDF
&#13;
https://docs.python.org/3/archives/python-3.7.4-docs-pdf-letter.zip</description>
      <content:encoded><![CDATA[<p><b>matrixtheory: </b><br>
<span>还是喜欢python的风格，一看就懂。反正我就写写玩具代码，真家伙都是直接c艹</span><br>
<span>----发送自 STAGE1 App for Android.</span><br>
</p><p><b>xy2401: </b><br>
<span>mark</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1851034[50-100]</guid>
    </item>
    <item>
      <title>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧[0-50]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1851034-1-1.html</link>
      <description>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧&#13;
 本帖最后由 CAMUS.net 于 2019-8-3 13:11 编辑 

一起来学python吧，一个人学习python太无聊了！
&#13;
离线官方中文方档
&#13;
HTML
&#13;
https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-html.zip
&#13;
PDF
&#13;
https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-pdf-letter.zip
&#13;
离线官方英文方档
&#13;
HTML
&#13;
https://docs.python.org/3/archives/python-3.7.4-docs-html.zip
&#13;
PDF
&#13;
https://docs.python.org/3/archives/python-3.7.4-docs-pdf-letter.zip</description>
      <content:encoded><![CDATA[<p><b>CAMUS.net: </b><br>
<span>python有官方中文文档了,在外野闲着也是闲着,一起来学python吧</span><br>
<span> 本帖最后由 CAMUS.net 于 2019-8-3 13:11 编辑 </span><br>
<span>一起来学python吧，一个人学习python太无聊了！</span><br>
<span>离线官方中文方档</span><br>
<span>HTML</span><br>
<span>https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-html.zip</span><br>
<span>PDF</span><br>
<span>https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-pdf-letter.zip</span><br>
<span>离线官方英文方档</span><br>
<span>HTML</span><br>
<span>https://docs.python.org/3/archives/python-3.7.4-docs-html.zip</span><br>
<span>PDF</span><br>
<span>https://docs.python.org/3/archives/python-3.7.4-docs-pdf-letter.zip</span><br>
</p><p><b>tsubasa9: </b><br>
<span>python侠今天也是元气满满</span><br>
</p><p><b>RAMDA: </b><br>
<span>呦，py侠好久不见啊</span><br>
<span>—— 来自 Xiaomi MI 6, Android 9上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>二狗还我五块钱: </b><br>
<span>赞美鹅球</span><br>
</p><p><b>cishta: </b><br>
<span>现在给离线文档了？</span><br>
</p><p><b>lightdog: </b><br>
<span>什么叫闲着也是闲着？！</span><br>
<span>很忙的好不好！！！</span><br>
</p><p><b>从西国到南国: </b><br>
<span>马一个</span><br>
</p><p><b>天桥夜风: </b><br>
<span>官网下载速度一如既往的感人</span><br>
</p><p><b>直刺苍穹的光: </b><br>
<span>中文文档翻译完了？之前看还是一堆未翻译的</span><br>
<span>—— 来自 HUAWEI NXT-AL10, Android 8.0.0上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>linc555: </b><br>
<span>手机看html用什么app比较好呢？</span><br>
<span>—— 来自 OnePlus ONEPLUS A5010, Android 9上的 S1Next-鹅版 v1.3.2.2</span><br>
</p><p><b>sykeash: </b><br>
<span>说明没有阅读英文文档能力</span><br>
<span>推荐易语言</span><br>
</p><p><b>CAMUS.net: </b><br>
<span> 本帖最后由 CAMUS.net 于 2019-8-3 13:10 编辑 </span><br>
<span> linc555 发表于 2019-8-3 13:03</span><br>
<span>手机看html用什么app比较好呢？</span><br>
<span>—— 来自 OnePlus ONEPLUS A5010, Android 9上的 S1Next-鹅版 v1.3.2.2 ...有PDF的</span><br>
<span>中文</span><br>
<span>https://docs.python.org/zh-cn/3/archives/python-3.7.4-docs-pdf-letter.zip</span><br>
<span>英文</span><br>
<span>https://docs.python.org/3/archives/python-3.7.4-docs-pdf-letter.zip</span><br>
</p><p><b>maxwell_goblin: </b><br>
<span>cishta 发表于 2019-8-3 12:57</span><br>
<span>现在给离线文档了？</span><br>
<span>记得很多年前的安装包里有个chm的离线文档</span><br>
<span>2011年大概</span><br>
</p><p><b>伊迪潘喵森: </b><br>
<span>python侠再临…………</span><br>
</p><p><b>Prolun: </b><br>
<span>看标题猜楼主系列</span><br>
</p><p><b>Timme: </b><br>
<span>考考你，超时强退怎么实现。（干某个活，电脑快可以正常干完，电脑慢就触发超时强退）</span><br>
</p><p><b>革萌: </b><br>
<span>Timme 发表于 2019-8-3 13:43</span><br>
<span>考考你，超时强退怎么实现。（干某个活，电脑快可以正常干完，电脑慢就触发超时强退） ...</span><br>
<span>python xxx.py & sleep 10; kill $</span><br>
</p><p><b>翠乙鼠: </b><br>
<span>谢lz,下来学习一下</span><br>
</p><p><b>CAMUS.net: </b><br>
<span> 本帖最后由 CAMUS.net 于 2019-8-3 13:58 编辑 </span><br>
<span>Timme 发表于 2019-8-3 13:43</span><br>
<span>考考你，超时强退怎么实现。（干某个活，电脑快可以正常干完，电脑慢就触发超时强退） ...import time</span><br>
<span>import sys</span><br>
<span>t = time.time()</span><br>
<span>s = 1</span><br>
<span>while True:</span><br>
<span>    time.sleep(1)</span><br>
<span>    print("等待%s秒" %s)</span><br>
<span>    t1 = time.time()</span><br>
<span>    if int(t1-t) >= 5:</span><br>
<span>      sys.exit()</span><br>
<span>    s = s + 1</span><br>
<span>D:\Python\Project01\test\test>1.py</span><br>
<span>等待1秒</span><br>
<span>等待2秒</span><br>
<span>等待3秒</span><br>
<span>等待4秒</span><br>
<span>等待5秒</span><br>
<span>D:\Python\Project01\test\test></span><br>
</p><p><b>をすりばば: </b><br>
<span>收藏即学会</span><br>
</p><p><b>Litccc: </b><br>
<span>好像早就有了</span><br>
<span>—— 来自 OnePlus GM1910, Android 9上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>Timme: </b><br>
<span> 本帖最后由 Timme 于 2019-8-3 14:26 编辑 </span><br>
<span>CAMUS.net 发表于 2019-8-3 13:57</span><br>
<span>Timme 发表于 2019-8-3 13:43</span><br>
<span>考考你，超时强退怎么实现。（干某个活，电脑快可以正常干完，电脑慢就触发超 ...</span><br>
<span>你这个干的活负荷太轻了，可以拿你之前写的性能测试代码作例子。</span><br>
<span>当然，最简单的是用 while 1: pass 作例子。</span><br>
</p><p><b>CAMUS.net: </b><br>
<span>Timme 发表于 2019-8-3 14:19</span><br>
<span>你这个干的活负荷太轻了，可以拿你之前写的性能测试代码作例子。</span><br>
<span>当然，最简单的是用 while 1: pass 作例 ...</span><br>
<span> 有一个很方便的轮子import time</span><br>
<span>import timeout_decorator</span><br>
<span>@timeout_decorator.timeout(5)</span><br>
<span>def mytest():</span><br>
<span>    print("Start")</span><br>
<span>    for i in range(1,10):</span><br>
<span>      time.sleep(1)</span><br>
<span>      print("{} seconds have passed".format(i))</span><br>
<span>if __name__ == '__main__':</span><br>
<span>    mytest()</span><br>
</p><p><b>最低人间肥宅: </b><br>
<span>马克</span><br>
</p><p><b>一片秋天的枫叶: </b><br>
<span>python侠是超能力者吗？（很好奇）</span><br>
</p><p><b>Timme: </b><br>
<span>CAMUS.net 发表于 2019-8-3 14:31</span><br>
<span>有一个很方便的轮子</span><br>
<span>AttributeError: module 'signal' has no attribute 'SIGALRM'”</span><br>
<span>你这个轮子貌似只能在Linux跑</span><br>
</p><p><b>dinghanzi: </b><br>
<span>不建个群吗</span><br>
</p><p><b>CAMUS.net: </b><br>
<span>Timme 发表于 2019-8-3 15:03</span><br>
<span>AttributeError: module 'signal' has no attribute 'SIGALRM'”</span><br>
<span>你这个轮子貌似只能在Linux跑 ...</span><br>
<span>import time</span><br>
<span>from wrapt_timeout_decorator import *</span><br>
<span>@timeout(3)</span><br>
<span>def mytest():</span><br>
<span>    while True:</span><br>
<span>      print("运行中")</span><br>
<span>def main():</span><br>
<span>    try:</span><br>
<span>      mytest()</span><br>
<span>    except:</span><br>
<span>      print('运行超时3秒')</span><br>
<span>if __name__ == '__main__':</span><br>
<span>    main()</span><br>
<span>请问你又是怎么实现的？</span><br>
</p><p><b>Timme: </b><br>
<span> 本帖最后由 Timme 于 2019-8-3 18:34 编辑 </span><br>
<span>CAMUS.net 发表于 2019-8-3 17:08</span><br>
<span>请问你又是怎么实现的？</span><br>
<span>我已经从python转go一年了。在go里是这样写的：</span><br>
<span>func main(){</span><br>
<span>go func(){</span><br>
<span>   time.Sleep(1e10) // nano second</span><br>
<span>   panic("timeout")</span><br>
<span>}()</span><br>
<span>for {} // == python "while 1:pass"</span><br>
<span>}</span><br>
</p><p><b>革萌: </b><br>
<span>Timme 发表于 2019-8-3 18:25</span><br>
<span>我已经从python转go一年了。在go里是这样写的：</span><br>
<span>func main(){</span><br>
<span>在通用系统里很难严格实现吧。我写一堆污糟代码，把CPU资源占完，操作系统卡死。</span><br>
<span>我不信你的记时线程还能抢到CPU来执行。</span><br>
</p><p><b>nkscorpio: </b><br>
<span>一片秋天的枫叶 发表于 2019-8-3 15:00</span><br>
<span>python侠是超能力者吗？（很好奇）</span><br>
<span>有这么清闲的现役超能力者么，看样子是业余爱好或者准备转行的 </span><br>
</p><p><b>hipper: </b><br>
<span>马一个</span><br>
<span>-- 来自 能搜索的 Stage1官方 Android客户端</span><br>
</p><p><b>dxx9999: </b><br>
<span>没有卵用的收藏了，也许某天记起来学</span><br>
</p><p><b>jpcl: </b><br>
<span>大哥哥你好强啊！</span><br>
</p><p><b>Timme: </b><br>
<span>CAMUS.net 发表于 2019-8-3 17:08</span><br>
<span>请问你又是怎么实现的？</span><br>
<span>我试了一下，你这个本质上和17楼是一样的，开了两个进程，用一个去杀另一个。</span><br>
<span>稍微有那么一点点“土”</span><br>
</p><p><b>風舞雪: </b><br>
<span>Timme 发表于 2019-8-3 18:25</span><br>
<span>我已经从python转go一年了。在go里是这样写的：</span><br>
<span>func main(){</span><br>
<span>这才是正确的go写法</span><br>
<span>select {</span><br>
<span>case <-time.After(time.Duration):</span><br>
<span>      // time out</span><br>
<span>default:</span><br>
<span>      // default</span><br>
<span>}</span><br>
<span>语言不存在转不转 都一样 只是特性不同而已 用合理的东西做合理的事</span><br>
</p><p><b>風舞雪: </b><br>
<span>再插一句嘴 python timeout正确的做法是是decorator 某楼的列子是对的</span><br>
</p><p><b>3Psm: </b><br>
<span>每天都在学py</span><br>
</p><p><b>Timme: </b><br>
<span>風舞雪 发表于 2019-8-4 00:29</span><br>
<span>这才是正确的go写法</span><br>
<span>select {</span><br>
<span>select只是看哪个channel先来数据，来数据后的处理部分和select并不是并行的。你这个广为流传的方法在default里写个for{}还是会直接卡死，最后还是得多开一个goroutine。</span><br>
</p><p><b>風舞雪: </b><br>
<span>Timme 发表于 2019-8-4 01:01</span><br>
<span>select只是看哪个channel先来数据，来数据后的处理部分和select并不是并行的。你这个广为流传的方法在def ...</span><br>
<span>你到底懂不懂？ 还广为流传的写法 还select里面写for？ 就你聪明？</span><br>
<span>这个写法是go concurrent pattern里go作者写的 废话广为流传</span><br>
<span>别胡搅蛮缠好嘛</span><br>
<span>https://blog.golang.org/go-concurrency-patterns-timing-out-and</span><br>
<span>你比go作者更懂go 因为你学了1年go？ 哥们我0.X就开始用go做公司项目了</span><br>
</p><p><b>Timme: </b><br>
<span>風舞雪 发表于 2019-8-4 01:23</span><br>
<span>你到底懂不懂？ 还广为流传的写法 还select里面写for？ 就你聪明？</span><br>
<span>这个写法是go concurrent pattern里go ...</span><br>
<span>那你秀一个怎么用select+time.After干掉for{}的例子吧，能编译的那种，请</span><br>
</p><p><b>witness-s1: </b><br>
<span>風舞雪 发表于 2019-8-4 00:29</span><br>
<span>这才是正确的go写法</span><br>
<span>select {</span><br>
<span>这写法没啥问题，在goroutine里面用panic很头疼的。。</span><br>
<span>— from Google Pixel 3 XL, Android 9 of S1 Next Goose v2.1.2</span><br>
</p><p><b>Timme: </b><br>
<span> 本帖最后由 Timme 于 2019-8-4 01:54 编辑 </span><br>
<span>witness-s1 发表于 2019-8-4 01:49</span><br>
<span>这写法没啥问题，在goroutine里面用panic很头疼的。。</span><br>
<span>— from Google Pixel 3 XL, Android 9 of S1 Nex ...</span><br>
<span>所以要怎么用select+time.After干掉for{}呢？</span><br>
<span>不过我还是忍不住要吐槽你的表达。go里面只有goroutine，main也是个goroutine，你不如说go里面用panic很头疼。那go设计这个关键字干嘛用的呢？go的关键字绝对是最简了，什么while / assert之类非必要的关键字都没有。</span><br>
</p><p><b>風舞雪: </b><br>
<span>拉杠的人真多</span><br>
<span>首先 timme的代码没问题 就像python一样 你爱怎么写就怎么写 但是这种代码肯定没法过CR 一看就知道刚开始学go的人写的 正确的说 刚搞懂goroutine的人 说一句还喜欢拉杠 搞得自己很懂一样</span><br>
<span>其次我想说的是 timme为什么思路执着于要人写 select+time.After干掉for{}呢</span><br>
<span>1. select本身也是个for 的event loop 比双go routine高效太多</span><br>
<span>2. 你都在一个loop里了 为什么不合理利用这个event loop用channel传递信息 而硬要在里面再写个loop？</span><br>
<span>3. 之所以我连想都不去想你这个逻辑的原因是 根本没必要 没人这么写 ok？ 这个就像有人和我说 你帮我写个divide by zero并且能编译一样可笑</span><br>
<span>别胡搅蛮缠了 你对 我对 毫无意义 我们都拿不到钱 劝你一句 爱听就听 不爱听就当耳边风吧</span><br>
<span>最后：</span><br>
<span>我推荐所有人 如果你要学golang 请务必读一下go concurrency pattern这些都是go作者解释go的设计 并且提供一种idiomatic way to write go code 少产垃圾代码</span><br>
<span>玩游戏去了</span><br>
</p><p><b>Timme: </b><br>
<span> 本帖最后由 Timme 于 2019-8-4 02:42 编辑 </span><br>
<span>風舞雪 发表于 2019-8-4 02:06</span><br>
<span>拉杠的人真多</span><br>
<span>首先 timme的代码没问题 就像python一样 你爱怎么写就怎么写 但是这种代码肯定没法过CR 一看 ...</span><br>
<span>老铁，select不是event loop，select执行一次就没了（特指你上面那种带default的select），你要loop得在外面再包个for。</span><br>
<span>连最简单的for{}都干不掉，真实的复杂耗时运算就别想干掉了，除非魔改运算函数。连python哥最后都成功干掉while 1:pass了，你这个说法实在是有点...</span><br>
</p><p><b>Timme: </b><br>
<span> 本帖最后由 Timme 于 2019-8-4 02:33 编辑 </span><br>
<span>革萌 发表于 2019-8-3 18:32</span><br>
<span>在通用系统里很难严格实现吧。我写一堆污糟代码，把CPU资源占完，操作系统卡死。</span><br>
<span>我不信你的记时线程还能 ...</span><br>
<span>你的说法是对的。只要启动了和线程数相等的goroutine同时跑for{}，线程永远不会出让给time.Sleep的那个goroutine，panic永远不会执行。</span><br>
<span>比如在 i5 上跑满 8 个 for{}，或者 2990wx 上跑满 64 个 for{}，panic 都永远不会执行。Windows 和 Linux 结果一样。</span><br>
<span>少 1 个 for{} 就可以执行了。这个不能算Bug，属于go的固有缺陷。从本质上，goroutine还是要排队进thread，并不是真的并行。</span><br>
</p><p><b>jpcl: </b><br>
<span>Timme 发表于 2019-8-4 02:32</span><br>
<span>你的说法是对的。只要启动了和线程数相等的goroutine同时跑for{}，线程永远不会出让给time.Sleep的那个gor ...</span><br>
<span>老哥，你的人工智能股票系统成功了没？有多的钱分给我好不好</span><br>
</p><p><b>witness-s1: </b><br>
<span>Timme 发表于 2019-8-4 01:30</span><br>
<span>那你秀一个怎么用select+time.After干掉for{}的例子吧，能编译的那种，请</span><br>
<span>我问你，超时的时候我想返回一个500怎么办？你这样写有任何办法recover那个panic么？</span><br>
</p><p><b>jpcl: </b><br>
<span>witness-s1 发表于 2019-8-4 03:32</span><br>
<span>我问你，超时的时候我想返回一个500怎么办？你这样写有任何办法recover那个panic么？ ...</span><br>
<span>你不要搅了老哥的兴致，我还等着老哥把他的人工智能Python炒股系统借我用用呢</span><br>
</p><p><b>__爱撕衣: </b><br>
<span>看ID猜lz成功</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1851034[0-50]</guid>
    </item>
  </channel>
</rss>
