<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>王垠：数学并不是计算机科学的基础</title>
    <link>https://bbs.saraba1st.com/2b/</link>
    <description>王垠：数学并不是计算机科学的基础</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 09 Jul 2020 19:27:33 +0000</lastBuildDate>
    <item>
      <title>王垠：数学并不是计算机科学的基础[50-100]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1842646-1-1.html</link>
      <description>王垠：数学并不是计算机科学的基础&#13;
 本帖最后由 1993 于 2019-6-27 14:43 编辑 

https://linux.cn/article-6714-1.html
&#13;
数学和编程好些人来信问我，要成为一个好的程序员，数学基础要达到什么样的程度？十八年前，当我成为大学计算机系新生的时候，也为同样的问题所困扰。面对学数学，物理等学科的同学，我感到自卑。经常有人说那些专业的知识更加精华一些，难度更高一些，那些专业的人毕业之后如果做编程工作，水平其实比计算机系毕业的还要高。直到深入研究程序语言之后，对这个问题我才得到了答案和解脱。由于好多编程新手遇到同样的困扰，所以我想在这里把这个问题详细的阐述一下。数学并不是计算机科学的基础很多人都盲目的认为，计算机科学是数学的一个分支，数学是计算机科学的基础，数学是更加博大精深的科学。这些人以为只要学会了数学，编程的事情全都不在话下，然而事实却并非如此。事实其实是这样的：计算机科学根本不是数学，它只不过借用了非常少，非常基础的数学，比高中数学还要容易。所谓“高等数学”，并不是研究计算机科学必须的。你可以用计算机来做微积分计算，可是这时候你其实是在做数学工作，用计算机作为工具。你研究的并不是计算机科学。这就像你可以用计算机来设计建筑，但建筑学却不是计算机科学的基础。计算机是比数学更加基础的工具，就像纸和笔一样。计算机可以用来解决数学的问题，也可以用来解决不是数学的问题，比如工程的问题，艺术的问题，经济的问题，社会的问题等等。计算机科学是完全独立的学科。学习了数学和物理，并不能代替对计算机科学的学习。你必须针对计算机科学进行学习，才有可能成为好的程序员。数学家所用的语言，比起常见的程序语言（比如C++，Java）来说，其实是非常落后而蹩脚的设计。所谓“数学的美感”，其实大部分是夜郎自大。99% 的数学家都写不出像样的代码。数学是异常糟糕的语言这并不是危言耸听。如果你深入研究过程序语言的理论，就会发现其实数学家们使用的那些符号，其实是一种非常糟糕的程序语言。数学的理论很多是有用的，然而数学家门用于描述这些理论所用的语言，却是纷繁复杂，缺乏一致性，可组合性（composability），简单性，可用性。这也就是为什么大部分人看到数学就头痛。这不是他们不够聪明，而是数学语言的“设计”有问题。人们学习数学的时候，其实只有少部分时间在思考它的精髓，而大部分时间是在折腾它的语法。举一个非常简单的例子。如果你说 cos2θ 表示 (cos θ)2，那么理所当然，cos-1θ 就应该表示 1/(cos θ) 了？可它偏偏不是！别被数学老师们的教条和借口欺骗啦，他们总是告诉你：“你应该记住这些！” 可是你想过吗：凭什么？ cos2θ 表示 (cos θ)2，而 cos-1θ，明明是一模一样的形式，表示的却是 arccos θ。一个是求幂，一个是调用反函数，风马不及，却写成一个样子。这样的语言设计混淆不堪，却喜欢以“约定俗成”作为借口。如果你再多看一些数学书，就会发现这只是数学语言几百年累积下来的糟粕的冰山一角。数学书里尽是各种上标下标，带括号的上标下标，x，y，z，a，b，c，f，g，h，各种扭来扭去的希腊字母，希伯来字母…… 斜体，黑体，花体，双影体，……用不同的字体来表示不同的“类型”。很多符号的含义，在不同的子领域里面都不一样。有些人上一门数学课，到最后还没明白那些符号是什么意思。直到今天，数学家们写书仍然非常不严谨。他们常犯的一个错误是把 x2 这样的东西叫做“函数”（function）。其实 x2 不是一个函数，它只是一个表达式。你必须同时指明“x 是参数”，加上 x2，才会成为一个函数。所以正确的函数写法其实看起来像这样：f(x) = x2。或者如果你不想给它一个名字，可以借用 lambda calculus 的写法，写成： λx.x2。可是数学家们灰常的喜欢“约定俗成”。他们定了一些不成文的规矩是这样：凡是叫“x”的，都是函数的参数，凡是叫“y”的，都可能是一个函数…… 所以你写 x2 就可以表示 λx.x2，而不需要显式的写出“λx”。殊不知这些约定俗成，看起来貌似可以让你少写几个字，却造成了许许多多的混淆和麻烦。比如，你在 Mathematica 里面可以对 x2 + y 求关于x的导数，而且会得到 y'(x) + 2x 这样蹊跷的结果，因为它认为 y 可能是一个函数。更奇怪的是，如果你在后面多加一个 a，也就是对 x2 + y + a 求导，你会得到 2x！那么 y'(x) 到哪里去了？莫名其妙……相对而言，程序语言就严谨很多，所有的程序语言都要求你必须指出函数的参数叫什么名字。像 x2 这样的东西，在程序语言里面不是一个函数（function），而只是一个表达式（expression）。即使 JavaScript 这样毛病众多的语言都是这样。比如，你必须写：function (x) { return x * x }那个括号里的(x)，显式的声明了变量的名字，避免了可能出现的混淆。我不是第一个指出这些问题的人。其实现代逻辑学的鼻祖 Gottlob Frege 在一百多年以前就在他的论文“Function and Concept”里批评了数学家们的这种做法。可是数学界的表达方式直到今天还是一样的混乱。很多人学习微积分都觉得困难，其实问题不在他们，而在于莱布尼兹（Leibniz）。莱布尼兹设计来描述微积分的语言（∫，dx, dy, …），从现代语言设计的角度来看，其实非常之糟糕，可以说是一塌糊涂。我不能怪莱布尼兹，他毕竟是几百年前的人了，他不知道我们现在知道的很多东西。然而古人的设计，现在还不考虑改进，反而当成教条灌输给学生，那就是不思进取了。数学的语言不像程序语言，它的历史太久，没有经过系统的，考虑周全的，统一的设计。各种数学符号的出现，往往是历史上某个数学家有天在黑板上随手画出一些古怪的符号，说这代表什么，那代表什么，…… 然后就定下来了。很多数学家只关心自己那块狭窄的子领域，为自己的理论随便设计出一套符号，完全不管这些是否跟其它子领域的符号相冲突。这就是为什么不同的数学子领域里写出同样的符号，却可以表示完全不同的涵义。在这种意义上，数学的语言跟 Perl（一种非常糟糕的程序语言）有些类似。Perl 把各种人需要的各种功能，不加选择地加进了语言里面，造成语言繁复不堪，甚至连Perl的创造者自己都不能理解它所有的功能。数学的证明，使用的其实也是极其不严格的语言——古怪的符号，加上含糊不清，容易误解的人类语言。如果你知道什么是 Curry-Howard Correspondence 就会明白，其实每一个数学证明都不过是一段代码。同样的定理，可以有许多不同版本的证明（代码）。这些证明有的简短优雅，有的却冗长繁复，像面条一样绕来绕去，没法看懂。你经常在数学证明里面看到“未定义的变量”，证明的逻辑也包含着各种隐含知识，思维跳跃，非常难以理解。很多数学证明，从程序的观点来看，连编译都不会通过，就别提运行了。数学家们往往不在乎证明的优雅性。他们认为只要能证明出定理，你管我的证明简不简单，容不容易看懂呢。你越是看不懂，就越是觉得我高深莫测，越是感觉你自己笨！这种思潮到了编程的时候就显出弊端了。数学家写代码，往往忽视代码的优雅性，简单性，模块化，可读性，性能，数据结构等重要因素，认为代码只要能算出结果就行。他们把代码当成跟证明一样，一次性的东西，所以他们的代码往往不能满足实际工程的严格要求。数学里最在乎语言设计的分支，莫过于逻辑学了。很多人（包括很多程序语言专家）都盲目的崇拜逻辑学家，盲目的相信数理逻辑是优雅美好的语言。在程序语言界，数理逻辑已经成为一种灾害，明明很容易就能解释清楚的语义，非得写成一堆稀奇古怪，含义混淆的逻辑公式。殊不知其实数理逻辑也是有很大的历史遗留问题和误区的。研究逻辑学的人经常遇到各种“不可判定”（undecidable）问题和所谓“悖论”（paradox），研究几十年也没搞清楚，而其实那些问题都是他们自己造出来的。你只需要把语言改一下，去掉一些不必要的功能，问题就没了。但逻辑学家们总喜欢跟你说，那是某天才老祖宗想出来的，多么多么的了不起啊，不能改！用一阶逻辑（first-order logic）这样的东西，你可以写出一些毫无意义的语句。逻辑老师们会告诉你，记住啦，这些是没有意义的，如果写出来这些东西，是你的问题！他们没有意识到，如果一个人可以用一个语言写出毫无意义的东西，那么这问题在于这个语言，而不在于这个人。一阶逻辑号称可以“表达所有数学”，结果事实却是，没有几个数学家真的可以用它表达很有用的知识。到后来，稍微明智一点的逻辑学家们开始研究这些老古董语言到底出了什么毛病，于是他们创造了 Model Theory 这样的理论。写出一些长篇大部头，用于“验证”这些逻辑语言的合理性。这些问题在我看来都是显而易见的，因为很多逻辑的语言根本就不是很好很有用的东西。去研究它们“为什么有毛病”，其实是白费力气。自己另外设计一个更好语言就完事了。在我看来，除了现代逻辑学的鼻祖 Gottlob Frege 理解了逻辑的精髓，其它逻辑学家基本都是照本宣科，一知半解。他们喜欢把简单的问题搞复杂，制造一些新名词，说得玄乎其玄灵丹妙药似的。如果你想了解逻辑学的精华，建议你看看 Frege 的文集。看了之后你也许会发现，Frege 思想的精华，其实已经融入在几乎所有的程序语言里了。编程是一门艺术从上面你也许已经明白了，普通程序员使用的编程语言，就算是 C++ 这样毛病众多的语言，其实也已经比数学家使用的语言好很多。用数学的语言可以写出含糊复杂的证明，在期刊或者学术会议上蒙混过关，用程序语言写出来的代码却无法混过计算机这道严格的关卡。因为计算机不是人，它不会迷迷糊糊的点点头让你混过去，或者因为你是大师就不懂装懂。代码是需要经过现实的检验的。如果你的代码有问题，它迟早会导致出问题。计算机科学并不是数学的一个分支，它在很大程度上是优于数学，高于数学的。有些数学的基本理论可以被计算机科学所用，然而计算机科学并不是数学的一部分。数学在语言方面带有太多的历史遗留糟粕，它其实是泥菩萨过河，自身难保，它根本解决不了编程中遇到的实际问题。编程真的是一门艺术，因为它符合艺术的各种特征。艺术可以利用科学提供的工具，然而它却不是科学的一部分，它的地位也并不低于科学。和所有的艺术一样，编程能解决科学没法解决的问题，满足人们新的需求，开拓新的世界。所以亲爱的程序员们，别再为自己不懂很多数学而烦恼了。数学并不能帮助你写出好的程序，然而能写出好程序的人，却能更好的理解数学。我建议你们先学编程，再去看数学。</description>
      <content:encoded><![CDATA[<p><b>黑芝麻狐: </b><br>
<span>垠神有特么在放黑屁了，之前的教材写完了吗？</span><br>
</p><p><b>uswhzh: </b><br>
<span>举了表达式却把自动机被开出数学领域了。矩阵，概率，统计直接被遗忘。离散好不容易把计算机证明规范化直接认定为无用。图论根本没讲。lambda计算好歹写了，然而用lambda函数否定编程中函数的重要性。编程和数学关系不谈函数式编程语言，不谈数学递归思想。一个词，弱智。</span><br>
</p><p><b>wardenlym: </b><br>
<span>黑芝麻狐 发表于 2019-6-27 16:08</span><br>
<span>垠神有特么在放黑屁了，之前的教材写完了吗？</span><br>
<span>sb楼主发个2015-12-10 的八手文章来troll，我琢磨垠神就算再怎么sb，也不至于被楼主这样的火星巨魔用来钓鱼</span><br>
</p><p><b>OedoSoldier: </b><br>
<span>微尘 发表于 2019-6-27 15:47</span><br>
<span>我也隐隐约约感觉过</span><br>
<span>数学的那一套描述语言有时候扭曲含糊，自相矛盾的</span><br>
<span>作为一门重视逻辑的学科，有时候难免 ...</span><br>
<span>光写程序那就不叫计算机“科学”了</span><br>
</p><p><b>wardenlym: </b><br>
<span>寺川愛美 发表于 2019-6-27 16:04</span><br>
<span>不完全是錯的，相當一部分值得反思，特別是篩走了他的自大後的核心思想</span><br>
<span>数学的符号体系，尤其是比较早期的，凌乱无比，根本看不出来任何的一致性。这一点喷的完全没毛病。</span><br>
<span>虽然王垠傻逼就傻逼在哪种一副说话像普度众生的口气。</span><br>
</p><p><b>308: </b><br>
<span>wardenlym 发表于 2019-06-27 16:12:33</span><br>
<span>数学的符号体系，尤其是比较早期的，凌乱无比，根本看不出来任何的一致性。这一点喷的完全没毛病。</span><br>
<span>虽然 ...从层主说话语气来看应该是跟垠神一类人...还是终于变成了自己讨厌的人的样子了……</span><br>
<span>-- 来自 能手机投票的 Stage1官方 iOS客户端</span><br>
</p><p><b>大暗月: </b><br>
<span>王垠就是个程序员，他懂什么计算机科学（暴言）</span><br>
<span>-- 来自 能看大图的 Stage1官方 Android客户端</span><br>
</p><p><b>lvseqiji: </b><br>
<span>miragez 发表于 2019-6-27 16:06</span><br>
<span>再过段时间怕不是图灵和冯诺依曼都要不认了。</span><br>
<span>Yinwang早就喷过图灵了</span><br>
<span>—— 来自 HUAWEI JSN-AL00a, Android 9上的 S1Next-鹅版 v2.1.0-play</span><br>
</p><p><b>Mocilol: </b><br>
<span>很多论文的数学公式翻译成代码确实可读性提升很多</span><br>
</p><p><b>gutzz: </b><br>
<span>诚司 发表于 2019-6-27 15:03</span><br>
<span>虽然王大仙这文章漏洞百出，而且他之前写的一个这种主题的文也是这样，但是肛道理，一个学科非要给自己找个 ...</span><br>
<span>grid search过于真实</span><br>
<span>— from OnePlus GM1910, Android 9 of S1 Next Goose v2.1.2</span><br>
</p><p><b>symnetry: </b><br>
<span>不说ai，量化模型等等深的东西，就拿浅显易懂的东西来说。就拿上s1摸鱼来说，你登个账号，上服务器验证密码先得加个密匹配，好了，怎么加密？离散出来了。你要去看这个帖子的所有回帖，怎么找出来？树出来了，图论出来了。你登陆上去要看帖子内容，内容怎么展示的？dom tree出来了，又是树，又是图论。不说别的有的没的，离了数学大家连摸鱼都摸不了，你打开个资源管理器都是树的形状，关于计算机的几乎所有东西你都能往下找到对应的数学模型。现在的码农机构培训几个月就出来了，只会复制黏贴当然不用懂数学，但是你黏贴复制的东西，用的库可都是建立在数学模型上的，能赞同这文观点的人水平可见一斑。对于一个水泥匠来说，造房子真的只需要会糊水泥就行了，造房子就那么简单。</span><br>
</p><p><b>haryseldon: </b><br>
<span>数学语言是不如程序语言规范不假，因为数学语言本身是在自然语言基础上发展出来的。学数学的时候确实会碰到各种各样的地方看不懂，卡住。但是应该很少是因为看不懂符号的。。看不懂符号说明只能说明没看过书或者前面看漏了。</span><br>
<span>数学符号变化的一个重要原因本来就是数学家想少写几个字，一些地方能简化就简化，对人类理解来说根本没有问题。比如文章里的cos^2x，按现在的符号，意思要么是cos(cosx),要么是(cos(x))^2，现在约定俗成就是第二种理解，如果有文章要用第一种，它肯定会在前文说明，对人理解毫无障碍。都按计算机语言的加n层括号，函数还要写成lambda表达式，反而是增加了很多不必要的冗余字符，看起来更累啊。</span><br>
<span>这人应该就没看过几本正经数学书。</span><br>
</p><p><b>nice女武神: </b><br>
<span>CAMUS.net 发表于 2019-6-27 15:04</span><br>
<span>数学是真理，谢谢。编程是用人类能看懂的编程语言写成代码，代码再经编译器转为0和1，处理器根据0和1处理 ...</span><br>
<span>数学是可能是真理但是目前的数学表达不是   文章就是批评后者</span><br>
</p><p><b>wardenlym: </b><br>
<span>308 发表于 2019-6-27 16:17</span><br>
<span>从层主说话语气来看应该是跟垠神一类人...还是终于变成了自己讨厌的人的样子了……</span><br>
<span>-- 来自 能手 ...</span><br>
<span>亚美咯，这是对我的褒奖吗</span><br>
<span>我承认我以前很崇拜王垠，认真的阅读了每一篇文章。王垠说话糙了点，但这篇老文对于数学中表达的诟病，没有问题。</span><br>
<span>虽然最近几年王垠表现的越来越巨魔，不过我觉得谁都难以否认其学术上的专业性。</span><br>
</p><p><b>metaphias: </b><br>
<span>他之前那个计算机科学系列还在写吗</span><br>
</p><p><b>田多宇光: </b><br>
<span>麻瓜风暴！越是不会数学和计算机声音越大</span><br>
</p><p><b>すぴぱら: </b><br>
<span>虽然yinwang是个傻逼没错，不过一个程序员确实用不到太多高等数学知识啊</span><br>
</p><p><b>enako_cosplay: </b><br>
<span>他水平到底咋样啊……   除了整天怼天怼地以外就没见过有啥实际成果</span><br>
</p><p><b>tokimon: </b><br>
<span>https://coolshell.cn/articles/19464.html</span><br>
</p><p><b>ChrisSnake: </b><br>
<span>诚司 发表于 2019-6-27 15:03</span><br>
<span>虽然王大仙这文章漏洞百出，而且他之前写的一个这种主题的文也是这样，但是肛道理，一个学科非要给自己找个 ...</span><br>
<span>因为数学就是一切学科的爹</span><br>
</p><p><b>metaphias: </b><br>
<span>miragez 发表于 2019-6-27 16:06</span><br>
<span>再过段时间怕不是图灵和冯诺依曼都要不认了。</span><br>
<span>yinwang：图灵就是个乐色，工作都是别人的，自己什么机器都没搞出来，搞得lowb玩意给lambda演算提鞋也不配</span><br>
</p><p><b>qiandai: </b><br>
<span>我本来有一个爬虫在阿里云上爬王垠的博客。后来服务器到期了居然忘了下载下来了..</span><br>
</p><p><b>limbo.null: </b><br>
<span>すぴぱら 发表于 2019-6-27 17:37</span><br>
<span>虽然yinwang是个傻逼没错，不过一个程序员确实用不到太多高等数学知识啊</span><br>
<span>但搞计算机科学的要啊</span><br>
</p><p><b>catazshadow: </b><br>
<span>井底之蛙</span><br>
</p><p><b>白影: </b><br>
<span>enako_cosplay 发表于 2019-6-27 17:45</span><br>
<span>他水平到底咋样啊……   除了整天怼天怼地以外就没见过有啥实际成果</span><br>
<span>他鄙视的人和物都有所成就了</span><br>
<span>唯独他还是个一事无成的角色</span><br>
</p><p><b>诚司: </b><br>
<span> 本帖最后由 诚司 于 2019-6-27 18:32 编辑 </span><br>
<span>symnetry 发表于 2019-6-27 16:30</span><br>
<span>不说ai，量化模型等等深的东西，就拿浅显易懂的东西来说。就拿上s1摸鱼来说，你登个账号，上服务器验证密码 ...</span><br>
<span>这个问题取决于什么是基础，比如你毕业要用ppt，而且某个图你必须自己画，那么美术素养是毕业的基础吗？或者更进一步，中文是吗？</span><br>
<span>如果你和做密码学的人聊过，就会发现他们中绝大部分不知道什么是Picard群和除子，但这并非他们无知。尽管ABE IBE这样的算法需要用椭圆曲线双线性对，但是椭圆曲线的代数几何构造并非是他们需要做的，真正要做的是像CP-ABE这样的算法，这种算法的构造不需要任何代数曲线的知识，只用拉格朗日差值这样的常识。当然也可以说这也是在做数学，但是这种还原论是没什么用的。</span><br>
<span>图，树或者其他数据结构的确是cs的重要部分，但是任何一个做计算机科学的人几乎都不会使用比匈牙利算法、Ford-Fulkerson更复杂的算法，一旦他这么做了，那他的身份一定是图论学家或者运筹学家，并且有这样身份的CS学者是少数人。</span><br>
<span>事实就是，每个学科有自己的核心问题，这些问题只有很少一部分是能靠其他学科所解决的，SDN，无线资源优化，传感器网络或者其他的什么，即便是能用数学表示，那也是自己学科的问题，否则既然能用文字叙述那任何问题都是语文问题了</span><br>
</p><p><b>holdson: </b><br>
<span>调参侠喷了</span><br>
<span>-- 来自 能手机投票的 Stage1官方 iOS客户端</span><br>
</p><p><b>すぴぱら: </b><br>
<span>enako_cosplay 发表于 2019-6-27 17:45</span><br>
<span> 他水平到底咋样啊……   除了整天怼天怼地以外就没见过有啥实际成果</span><br>
<span>大概最大的成果就是这玩意</span><br>
<span>https://github.com/yinwang0/pysonar2</span><br>
<span>他在谷歌和巨硬那几年到底干过啥就不知道了，怕是养老部</span><br>
</p><p><b>wxcabc: </b><br>
<span>symnetry 发表于 2019-6-27 16:30</span><br>
<span>不说ai，量化模型等等深的东西，就拿浅显易懂的东西来说。就拿上s1摸鱼来说，你登个账号，上服务器验证密码 ...</span><br>
<span>但是你说的这些都是计算机应用，不代表数学是计算机科学的基础。</span><br>
<span>实际上计算机科学的基础就是体系结构、OS、编译器这些东西，对这些东西的掌握并不需要多高端的数学知识。</span><br>
<span>至于再高一个层次的算法，基本常用的算法也不需要高级数学知识。树这种东西当成什么高深的数学结构就很扯淡了，搞OI的高中生数学基础完全到不了本科水平一样玩的溜。</span><br>
<span>至于「你用的库都是建立在数学模型上」也属于瞎扯。就说 AI 这种你觉得很需要数学知识的东西吧，我们在写 AI 基础库的时候要解决的问题基本和数学没屌关系。重要的是理解目标设备（一般是GPU）的特性与上层对于接口的需求。实现一个高效conv层需要什么数学知识吗？conv做了什么你拽个初中生来10分钟也能讲明白。梯度下降这种东西也就是高中水平数学再补几小时课就能懂的。</span><br>
<span>如果你给我两个人选一个做AI基础库，一个随机过程凸优化耍得特别溜但是完全不懂计算机，一个懂GPU会SIMD但是数学就高中水平，我用谁？我当然用第二个啊！</span><br>
</p><p><b>turnxxx: </b><br>
<span>我还以为他要批判一番集合论或者范畴论呢，没想到说的是这么个jb，他懂个jb的数学</span><br>
</p><p><b>turnxxx: </b><br>
<span> 本帖最后由 turnxxx 于 2019-6-27 21:29 编辑 </span><br>
<span>εRemastered 发表于 2019-6-27 15:17</span><br>
<span>我有这么两个问题：</span><br>
<span>1 他似乎想说：数学家花很大功夫搞的“数学语言” 绝大部分跟真正的数学没有关系，而 ...</span><br>
<span>他提到的那些算个几把的数学语言，函数怎么写，积分怎么写根本就没人关心，数学家根本就不在这上面花功夫，要是连这都搞不明白，那纯弱智。集合论，范畴论，或者具体点的ε-δ，点集拓扑的那一大堆概念之类的才能差不多算得上数学语言。</span><br>
</p><p><b>xxren: </b><br>
<span>Perl 把各种人需要的各种功能，不加选择地加进了语言里面，造成语言繁复不堪，甚至连Perl的创造者自己都不能理解它所有的功能。</span><br>
<span>顶</span><br>
<span>—— 来自 HUAWEI VOG-AL00, Android 9上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>polymaths: </b><br>
<span>abuse of notation 是个问题但是槽点完全不对。cos^-1 是 cos 的逆没错，问题在 cos^2 应该是复合而不是平方，其实早在群论出来之前高斯就抱怨过这个... 至于莱布尼兹，最迷惑的dy/dx其实问题也不大。</span><br>
<span>大概 math envy 和无用论只有一线之隔，作者对数学帝国主义的反动也不是不能理解。但即使CS要用的数学是个零测集，数理逻辑的问题也不会是“他们自己造出来的”。不知道他是不是觉得mordell猜想也像 model theory 一样“显而易见”。</span><br>
<span>但逻辑学家们总喜欢跟你说，那是某天才老祖宗想出来的，多么多么的了不起啊，不能改！</span><br>
<span>在我看来，除了现代逻辑学的鼻祖 Gottlob Frege 理解了逻辑的精髓，其它逻辑学家基本都是照本宣科，一知半解。</span><br>
<span>究竟是谁在诉诸老祖宗呢？</span><br>
</p><p><b>千本blur: </b><br>
<span>将这篇文章中“数学”和“计算机科学“这两个词调换过来，你会发现它同样惊人地通顺。</span><br>
</p><p><b>oT3To: </b><br>
<span>就是剑鞘 发表于 2019-6-27 15:06</span><br>
<span>所以编程也不是科学……？</span><br>
<span>编程本身就是门手艺</span><br>
</p><p><b>#@qqqy: </b><br>
<span>为什么李吟那么崇拜王垠?</span><br>
</p><p><b>violind88: </b><br>
<span>要造轮子还是需要数学的 拼乐高的话不需要</span><br>
<span>最近在补离散数学 真的很有趣</span><br>
</p><p><b>自旋: </b><br>
<span> 本帖最后由 自旋 于 2019-6-27 22:06 编辑 </span><br>
<span>王垠的写作能力其实也挺好。</span><br>
</p><p><b>松开的鞋带: </b><br>
<span> 本帖最后由 松开的鞋带 于 2019-6-27 22:14 编辑 </span><br>
<span>说到这个，我突然想问一下，有篇小说是一帮子码农在线打架，不同武功流派就是使用的不同计算机语言，有个妹子用的是个上古语言Perl，大家都不熟悉，结果就是初见杀的小说，叫啥？</span><br>
<span>—— 来自 Razer Phone, Android 8.1.0上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>obiy: </b><br>
<span>metaphias 发表于 2019-6-27 17:32</span><br>
<span>他之前那个计算机科学系列还在写吗</span><br>
<span> 序章都没完结就弃坑了</span><br>
</p><p><b>symnetry: </b><br>
<span>诚司 发表于 2019-6-27 18:31</span><br>
<span>这个问题取决于什么是基础，比如你毕业要用ppt，而且某个图你必须自己画，那么美术素养是毕业的基础吗？或 ...</span><br>
<span>我觉得您跑题了，您阐述的一直是，一个只做应用层的码农，是否需要足够的数学知识。这个问题我已经表达过我的观点了，对于一个水泥匠来说，造房子就只是糊水泥那么简单。在观点一致的情况下我并不太清楚本段文字是要说服我些什么？</span><br>
<span>您提到了密码学，很好，那么在实际使用中作为加密算法最重要的是什么？安全性，而安全性怎么证明？安全性的证明需要您自己去提出最优解，并且保证在暴力破解下一定年数内不被攻破，这些都是数学证明题。诚然你一个应用层程序员在最后使用的时候可能只需要调用一下就结束了，但是并不代表底层实现与数学无关。</span><br>
<span>再者，还是说树，树作为整个计算机科学里被研究的最透彻的图型来说，很有代表性，并且充斥在各个地方。即便是你应用层程序员一样会需要用到键值对，那么键值对的底层实现是什么？还是树。你可以不知道底层是如何实现的，但是你改变不了底层在用数学模型解决问题的事实。如果你把数学模型从计算机科学里拿掉，那么可能你连代码都写不了，这无关于你是否懂，而是计算机科学那么多年发展下来无数前人做下的祭奠。所以数学自然是计算机科学的基础。</span><br>
<span>这个帖子的本质问题在于，你觉得你生涯目标是水泥匠，那么没问题，这是你的追求，没人可以说三道四。你鼓吹大家去当水泥匠，也没问题，谁愿意做的就去做。但是你非要说造房子只需要懂糊水泥，那就是另一个故事了。</span><br>
</p><p><b>qaweqa: </b><br>
<span>symnetry 发表于 2019-6-27 16:30</span><br>
<span>不说ai，量化模型等等深的东西，就拿浅显易懂的东西来说。就拿上s1摸鱼来说，你登个账号，上服务器验证密码 ...</span><br>
<span>算法未必要和数学完全绑定</span><br>
<span>他们之间有一定联系 但一个人数学好显然不代表他算法好</span><br>
</p><p><b>泉玲奈: </b><br>
<span> 本帖最后由 泉玲奈 于 2019-6-29 18:32 编辑 </span><br>
<span>我只能说复杂一点的连加</span><br>
<span>要在脑子里展开到底是个什么玩意,不舒服</span><br>
<span>最后我展开在纸上了.......</span><br>
<span>其他的也是........</span><br>
<span>为什么不给我写出来呢?要我自己去写呢</span><br>
</p><p><b>爱夏: </b><br>
<span>白影 发表于 2019-6-27 15:10</span><br>
<span>这人现在在干嘛？</span><br>
<span>上一次看到的信息是intel 上海</span><br>
</p><p><b>执法战士: </b><br>
<span>我觉得数学非要把语言代码化规范化，那数学就真的像代码一样谁也看不懂了，比如sin cos改成function1()function2() 基本就没有可读性了。</span><br>
<span>—— 来自 Xiaomi MIX 2, Android 8.0.0上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>想喝肥宅快乐水: </b><br>
<span>好多年前的文章了，为什么还要再发一次。</span><br>
</p><p><b>败犬的反扑: </b><br>
<span>数学重要的是思想，思考。</span><br>
</p><p><b>诚司: </b><br>
<span> 本帖最后由 诚司 于 2019-6-29 22:39 编辑 </span><br>
<span>symnetry 发表于 2019-6-28 15:57</span><br>
<span>我觉得您跑题了，您阐述的一直是，一个只做应用层的码农，是否需要足够的数学知识。这个问题我已经表达过 ...</span><br>
<span>我觉得主要是你没懂我在说什么……</span><br>
<span>首先众所周知的是，安全性是没有证明的，因为现在计算理论可以证明很多东西之间的可计算性是多项式等价的，但是无论RSA或者基于双线性对的IBE以及ABE，都依赖于Diffie-Hellman的假设，他们的假设需要P不等于NP，只有在P不等于NP的情况下，公钥密码学才成立，但是这是没有证明的……关于这个你可以参考计算性理论</span><br>
<span>RSA的实现依赖与大素数分解，RSA的原理是所有人都懂得，原因很简单，大素数分解和欧几里得算法根本算不上数学， 而是只要一个人有正常的智力就懂的常识……（尽管证明一个环是欧几里得环是比较复杂的问题，但事实上RSA里几乎永远用不上非PID和非UFD）</span><br>
<span>如果你学ABE和IBE，往往他们会教你拉格朗日插值，而不会教你Weil pairing，尽管后者才是ABE和IBE的基础，前者只不过是地球人都知道的常识而已，原因很简单，后者依赖于代数曲线的Picard群构造，而做密码学的人没必要懂</span><br>
<span>如果你把拉格朗日插值和红黑树叫做数学，所以数学是计算机的基础，那水泥匠就可以宣称自己混水泥的时候用了流体力学，所以流体力学是水泥匠的基础了……</span><br>
<span>尽管宣称水泥匠不用学流体力学是反智主义，那宣传水泥匠一定要用流体力学算什么呢</span><br>
<span>当然，问题是，CS不是水泥匠，计算机科学本身是一种有价值的工作，何必找个八竿子打不着的流体力学的爹？</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1842646[50-100]</guid>
    </item>
    <item>
      <title>王垠：数学并不是计算机科学的基础[0-50]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1842646-1-1.html</link>
      <description>王垠：数学并不是计算机科学的基础&#13;
 本帖最后由 1993 于 2019-6-27 14:43 编辑 

https://linux.cn/article-6714-1.html
&#13;
数学和编程好些人来信问我，要成为一个好的程序员，数学基础要达到什么样的程度？十八年前，当我成为大学计算机系新生的时候，也为同样的问题所困扰。面对学数学，物理等学科的同学，我感到自卑。经常有人说那些专业的知识更加精华一些，难度更高一些，那些专业的人毕业之后如果做编程工作，水平其实比计算机系毕业的还要高。直到深入研究程序语言之后，对这个问题我才得到了答案和解脱。由于好多编程新手遇到同样的困扰，所以我想在这里把这个问题详细的阐述一下。数学并不是计算机科学的基础很多人都盲目的认为，计算机科学是数学的一个分支，数学是计算机科学的基础，数学是更加博大精深的科学。这些人以为只要学会了数学，编程的事情全都不在话下，然而事实却并非如此。事实其实是这样的：计算机科学根本不是数学，它只不过借用了非常少，非常基础的数学，比高中数学还要容易。所谓“高等数学”，并不是研究计算机科学必须的。你可以用计算机来做微积分计算，可是这时候你其实是在做数学工作，用计算机作为工具。你研究的并不是计算机科学。这就像你可以用计算机来设计建筑，但建筑学却不是计算机科学的基础。计算机是比数学更加基础的工具，就像纸和笔一样。计算机可以用来解决数学的问题，也可以用来解决不是数学的问题，比如工程的问题，艺术的问题，经济的问题，社会的问题等等。计算机科学是完全独立的学科。学习了数学和物理，并不能代替对计算机科学的学习。你必须针对计算机科学进行学习，才有可能成为好的程序员。数学家所用的语言，比起常见的程序语言（比如C++，Java）来说，其实是非常落后而蹩脚的设计。所谓“数学的美感”，其实大部分是夜郎自大。99% 的数学家都写不出像样的代码。数学是异常糟糕的语言这并不是危言耸听。如果你深入研究过程序语言的理论，就会发现其实数学家们使用的那些符号，其实是一种非常糟糕的程序语言。数学的理论很多是有用的，然而数学家门用于描述这些理论所用的语言，却是纷繁复杂，缺乏一致性，可组合性（composability），简单性，可用性。这也就是为什么大部分人看到数学就头痛。这不是他们不够聪明，而是数学语言的“设计”有问题。人们学习数学的时候，其实只有少部分时间在思考它的精髓，而大部分时间是在折腾它的语法。举一个非常简单的例子。如果你说 cos2θ 表示 (cos θ)2，那么理所当然，cos-1θ 就应该表示 1/(cos θ) 了？可它偏偏不是！别被数学老师们的教条和借口欺骗啦，他们总是告诉你：“你应该记住这些！” 可是你想过吗：凭什么？ cos2θ 表示 (cos θ)2，而 cos-1θ，明明是一模一样的形式，表示的却是 arccos θ。一个是求幂，一个是调用反函数，风马不及，却写成一个样子。这样的语言设计混淆不堪，却喜欢以“约定俗成”作为借口。如果你再多看一些数学书，就会发现这只是数学语言几百年累积下来的糟粕的冰山一角。数学书里尽是各种上标下标，带括号的上标下标，x，y，z，a，b，c，f，g，h，各种扭来扭去的希腊字母，希伯来字母…… 斜体，黑体，花体，双影体，……用不同的字体来表示不同的“类型”。很多符号的含义，在不同的子领域里面都不一样。有些人上一门数学课，到最后还没明白那些符号是什么意思。直到今天，数学家们写书仍然非常不严谨。他们常犯的一个错误是把 x2 这样的东西叫做“函数”（function）。其实 x2 不是一个函数，它只是一个表达式。你必须同时指明“x 是参数”，加上 x2，才会成为一个函数。所以正确的函数写法其实看起来像这样：f(x) = x2。或者如果你不想给它一个名字，可以借用 lambda calculus 的写法，写成： λx.x2。可是数学家们灰常的喜欢“约定俗成”。他们定了一些不成文的规矩是这样：凡是叫“x”的，都是函数的参数，凡是叫“y”的，都可能是一个函数…… 所以你写 x2 就可以表示 λx.x2，而不需要显式的写出“λx”。殊不知这些约定俗成，看起来貌似可以让你少写几个字，却造成了许许多多的混淆和麻烦。比如，你在 Mathematica 里面可以对 x2 + y 求关于x的导数，而且会得到 y'(x) + 2x 这样蹊跷的结果，因为它认为 y 可能是一个函数。更奇怪的是，如果你在后面多加一个 a，也就是对 x2 + y + a 求导，你会得到 2x！那么 y'(x) 到哪里去了？莫名其妙……相对而言，程序语言就严谨很多，所有的程序语言都要求你必须指出函数的参数叫什么名字。像 x2 这样的东西，在程序语言里面不是一个函数（function），而只是一个表达式（expression）。即使 JavaScript 这样毛病众多的语言都是这样。比如，你必须写：function (x) { return x * x }那个括号里的(x)，显式的声明了变量的名字，避免了可能出现的混淆。我不是第一个指出这些问题的人。其实现代逻辑学的鼻祖 Gottlob Frege 在一百多年以前就在他的论文“Function and Concept”里批评了数学家们的这种做法。可是数学界的表达方式直到今天还是一样的混乱。很多人学习微积分都觉得困难，其实问题不在他们，而在于莱布尼兹（Leibniz）。莱布尼兹设计来描述微积分的语言（∫，dx, dy, …），从现代语言设计的角度来看，其实非常之糟糕，可以说是一塌糊涂。我不能怪莱布尼兹，他毕竟是几百年前的人了，他不知道我们现在知道的很多东西。然而古人的设计，现在还不考虑改进，反而当成教条灌输给学生，那就是不思进取了。数学的语言不像程序语言，它的历史太久，没有经过系统的，考虑周全的，统一的设计。各种数学符号的出现，往往是历史上某个数学家有天在黑板上随手画出一些古怪的符号，说这代表什么，那代表什么，…… 然后就定下来了。很多数学家只关心自己那块狭窄的子领域，为自己的理论随便设计出一套符号，完全不管这些是否跟其它子领域的符号相冲突。这就是为什么不同的数学子领域里写出同样的符号，却可以表示完全不同的涵义。在这种意义上，数学的语言跟 Perl（一种非常糟糕的程序语言）有些类似。Perl 把各种人需要的各种功能，不加选择地加进了语言里面，造成语言繁复不堪，甚至连Perl的创造者自己都不能理解它所有的功能。数学的证明，使用的其实也是极其不严格的语言——古怪的符号，加上含糊不清，容易误解的人类语言。如果你知道什么是 Curry-Howard Correspondence 就会明白，其实每一个数学证明都不过是一段代码。同样的定理，可以有许多不同版本的证明（代码）。这些证明有的简短优雅，有的却冗长繁复，像面条一样绕来绕去，没法看懂。你经常在数学证明里面看到“未定义的变量”，证明的逻辑也包含着各种隐含知识，思维跳跃，非常难以理解。很多数学证明，从程序的观点来看，连编译都不会通过，就别提运行了。数学家们往往不在乎证明的优雅性。他们认为只要能证明出定理，你管我的证明简不简单，容不容易看懂呢。你越是看不懂，就越是觉得我高深莫测，越是感觉你自己笨！这种思潮到了编程的时候就显出弊端了。数学家写代码，往往忽视代码的优雅性，简单性，模块化，可读性，性能，数据结构等重要因素，认为代码只要能算出结果就行。他们把代码当成跟证明一样，一次性的东西，所以他们的代码往往不能满足实际工程的严格要求。数学里最在乎语言设计的分支，莫过于逻辑学了。很多人（包括很多程序语言专家）都盲目的崇拜逻辑学家，盲目的相信数理逻辑是优雅美好的语言。在程序语言界，数理逻辑已经成为一种灾害，明明很容易就能解释清楚的语义，非得写成一堆稀奇古怪，含义混淆的逻辑公式。殊不知其实数理逻辑也是有很大的历史遗留问题和误区的。研究逻辑学的人经常遇到各种“不可判定”（undecidable）问题和所谓“悖论”（paradox），研究几十年也没搞清楚，而其实那些问题都是他们自己造出来的。你只需要把语言改一下，去掉一些不必要的功能，问题就没了。但逻辑学家们总喜欢跟你说，那是某天才老祖宗想出来的，多么多么的了不起啊，不能改！用一阶逻辑（first-order logic）这样的东西，你可以写出一些毫无意义的语句。逻辑老师们会告诉你，记住啦，这些是没有意义的，如果写出来这些东西，是你的问题！他们没有意识到，如果一个人可以用一个语言写出毫无意义的东西，那么这问题在于这个语言，而不在于这个人。一阶逻辑号称可以“表达所有数学”，结果事实却是，没有几个数学家真的可以用它表达很有用的知识。到后来，稍微明智一点的逻辑学家们开始研究这些老古董语言到底出了什么毛病，于是他们创造了 Model Theory 这样的理论。写出一些长篇大部头，用于“验证”这些逻辑语言的合理性。这些问题在我看来都是显而易见的，因为很多逻辑的语言根本就不是很好很有用的东西。去研究它们“为什么有毛病”，其实是白费力气。自己另外设计一个更好语言就完事了。在我看来，除了现代逻辑学的鼻祖 Gottlob Frege 理解了逻辑的精髓，其它逻辑学家基本都是照本宣科，一知半解。他们喜欢把简单的问题搞复杂，制造一些新名词，说得玄乎其玄灵丹妙药似的。如果你想了解逻辑学的精华，建议你看看 Frege 的文集。看了之后你也许会发现，Frege 思想的精华，其实已经融入在几乎所有的程序语言里了。编程是一门艺术从上面你也许已经明白了，普通程序员使用的编程语言，就算是 C++ 这样毛病众多的语言，其实也已经比数学家使用的语言好很多。用数学的语言可以写出含糊复杂的证明，在期刊或者学术会议上蒙混过关，用程序语言写出来的代码却无法混过计算机这道严格的关卡。因为计算机不是人，它不会迷迷糊糊的点点头让你混过去，或者因为你是大师就不懂装懂。代码是需要经过现实的检验的。如果你的代码有问题，它迟早会导致出问题。计算机科学并不是数学的一个分支，它在很大程度上是优于数学，高于数学的。有些数学的基本理论可以被计算机科学所用，然而计算机科学并不是数学的一部分。数学在语言方面带有太多的历史遗留糟粕，它其实是泥菩萨过河，自身难保，它根本解决不了编程中遇到的实际问题。编程真的是一门艺术，因为它符合艺术的各种特征。艺术可以利用科学提供的工具，然而它却不是科学的一部分，它的地位也并不低于科学。和所有的艺术一样，编程能解决科学没法解决的问题，满足人们新的需求，开拓新的世界。所以亲爱的程序员们，别再为自己不懂很多数学而烦恼了。数学并不能帮助你写出好的程序，然而能写出好程序的人，却能更好的理解数学。我建议你们先学编程，再去看数学。</description>
      <content:encoded><![CDATA[<p><b>1993: </b><br>
<span>王垠：数学并不是计算机科学的基础</span><br>
<span> 本帖最后由 1993 于 2019-6-27 14:43 编辑 </span><br>
<span>https://linux.cn/article-6714-1.html</span><br>
<span>数学和编程好些人来信问我，要成为一个好的程序员，数学基础要达到什么样的程度？十八年前，当我成为大学计算机系新生的时候，也为同样的问题所困扰。面对学数学，物理等学科的同学，我感到自卑。经常有人说那些专业的知识更加精华一些，难度更高一些，那些专业的人毕业之后如果做编程工作，水平其实比计算机系毕业的还要高。直到深入研究程序语言之后，对这个问题我才得到了答案和解脱。由于好多编程新手遇到同样的困扰，所以我想在这里把这个问题详细的阐述一下。数学并不是计算机科学的基础很多人都盲目的认为，计算机科学是数学的一个分支，数学是计算机科学的基础，数学是更加博大精深的科学。这些人以为只要学会了数学，编程的事情全都不在话下，然而事实却并非如此。事实其实是这样的：计算机科学根本不是数学，它只不过借用了非常少，非常基础的数学，比高中数学还要容易。所谓“高等数学”，并不是研究计算机科学必须的。你可以用计算机来做微积分计算，可是这时候你其实是在做数学工作，用计算机作为工具。你研究的并不是计算机科学。这就像你可以用计算机来设计建筑，但建筑学却不是计算机科学的基础。计算机是比数学更加基础的工具，就像纸和笔一样。计算机可以用来解决数学的问题，也可以用来解决不是数学的问题，比如工程的问题，艺术的问题，经济的问题，社会的问题等等。计算机科学是完全独立的学科。学习了数学和物理，并不能代替对计算机科学的学习。你必须针对计算机科学进行学习，才有可能成为好的程序员。数学家所用的语言，比起常见的程序语言（比如C++，Java）来说，其实是非常落后而蹩脚的设计。所谓“数学的美感”，其实大部分是夜郎自大。99% 的数学家都写不出像样的代码。数学是异常糟糕的语言这并不是危言耸听。如果你深入研究过程序语言的理论，就会发现其实数学家们使用的那些符号，其实是一种非常糟糕的程序语言。数学的理论很多是有用的，然而数学家门用于描述这些理论所用的语言，却是纷繁复杂，缺乏一致性，可组合性（composability），简单性，可用性。这也就是为什么大部分人看到数学就头痛。这不是他们不够聪明，而是数学语言的“设计”有问题。人们学习数学的时候，其实只有少部分时间在思考它的精髓，而大部分时间是在折腾它的语法。举一个非常简单的例子。如果你说 cos2θ 表示 (cos θ)2，那么理所当然，cos-1θ 就应该表示 1/(cos θ) 了？可它偏偏不是！别被数学老师们的教条和借口欺骗啦，他们总是告诉你：“你应该记住这些！” 可是你想过吗：凭什么？ cos2θ 表示 (cos θ)2，而 cos-1θ，明明是一模一样的形式，表示的却是 arccos θ。一个是求幂，一个是调用反函数，风马不及，却写成一个样子。这样的语言设计混淆不堪，却喜欢以“约定俗成”作为借口。如果你再多看一些数学书，就会发现这只是数学语言几百年累积下来的糟粕的冰山一角。数学书里尽是各种上标下标，带括号的上标下标，x，y，z，a，b，c，f，g，h，各种扭来扭去的希腊字母，希伯来字母…… 斜体，黑体，花体，双影体，……用不同的字体来表示不同的“类型”。很多符号的含义，在不同的子领域里面都不一样。有些人上一门数学课，到最后还没明白那些符号是什么意思。直到今天，数学家们写书仍然非常不严谨。他们常犯的一个错误是把 x2 这样的东西叫做“函数”（function）。其实 x2 不是一个函数，它只是一个表达式。你必须同时指明“x 是参数”，加上 x2，才会成为一个函数。所以正确的函数写法其实看起来像这样：f(x) = x2。或者如果你不想给它一个名字，可以借用 lambda calculus 的写法，写成： λx.x2。可是数学家们灰常的喜欢“约定俗成”。他们定了一些不成文的规矩是这样：凡是叫“x”的，都是函数的参数，凡是叫“y”的，都可能是一个函数…… 所以你写 x2 就可以表示 λx.x2，而不需要显式的写出“λx”。殊不知这些约定俗成，看起来貌似可以让你少写几个字，却造成了许许多多的混淆和麻烦。比如，你在 Mathematica 里面可以对 x2 + y 求关于x的导数，而且会得到 y'(x) + 2x 这样蹊跷的结果，因为它认为 y 可能是一个函数。更奇怪的是，如果你在后面多加一个 a，也就是对 x2 + y + a 求导，你会得到 2x！那么 y'(x) 到哪里去了？莫名其妙……相对而言，程序语言就严谨很多，所有的程序语言都要求你必须指出函数的参数叫什么名字。像 x2 这样的东西，在程序语言里面不是一个函数（function），而只是一个表达式（expression）。即使 JavaScript 这样毛病众多的语言都是这样。比如，你必须写：function (x) { return x * x }那个括号里的(x)，显式的声明了变量的名字，避免了可能出现的混淆。我不是第一个指出这些问题的人。其实现代逻辑学的鼻祖 Gottlob Frege 在一百多年以前就在他的论文“Function and Concept”里批评了数学家们的这种做法。可是数学界的表达方式直到今天还是一样的混乱。很多人学习微积分都觉得困难，其实问题不在他们，而在于莱布尼兹（Leibniz）。莱布尼兹设计来描述微积分的语言（∫，dx, dy, …），从现代语言设计的角度来看，其实非常之糟糕，可以说是一塌糊涂。我不能怪莱布尼兹，他毕竟是几百年前的人了，他不知道我们现在知道的很多东西。然而古人的设计，现在还不考虑改进，反而当成教条灌输给学生，那就是不思进取了。数学的语言不像程序语言，它的历史太久，没有经过系统的，考虑周全的，统一的设计。各种数学符号的出现，往往是历史上某个数学家有天在黑板上随手画出一些古怪的符号，说这代表什么，那代表什么，…… 然后就定下来了。很多数学家只关心自己那块狭窄的子领域，为自己的理论随便设计出一套符号，完全不管这些是否跟其它子领域的符号相冲突。这就是为什么不同的数学子领域里写出同样的符号，却可以表示完全不同的涵义。在这种意义上，数学的语言跟 Perl（一种非常糟糕的程序语言）有些类似。Perl 把各种人需要的各种功能，不加选择地加进了语言里面，造成语言繁复不堪，甚至连Perl的创造者自己都不能理解它所有的功能。数学的证明，使用的其实也是极其不严格的语言——古怪的符号，加上含糊不清，容易误解的人类语言。如果你知道什么是 Curry-Howard Correspondence 就会明白，其实每一个数学证明都不过是一段代码。同样的定理，可以有许多不同版本的证明（代码）。这些证明有的简短优雅，有的却冗长繁复，像面条一样绕来绕去，没法看懂。你经常在数学证明里面看到“未定义的变量”，证明的逻辑也包含着各种隐含知识，思维跳跃，非常难以理解。很多数学证明，从程序的观点来看，连编译都不会通过，就别提运行了。数学家们往往不在乎证明的优雅性。他们认为只要能证明出定理，你管我的证明简不简单，容不容易看懂呢。你越是看不懂，就越是觉得我高深莫测，越是感觉你自己笨！这种思潮到了编程的时候就显出弊端了。数学家写代码，往往忽视代码的优雅性，简单性，模块化，可读性，性能，数据结构等重要因素，认为代码只要能算出结果就行。他们把代码当成跟证明一样，一次性的东西，所以他们的代码往往不能满足实际工程的严格要求。数学里最在乎语言设计的分支，莫过于逻辑学了。很多人（包括很多程序语言专家）都盲目的崇拜逻辑学家，盲目的相信数理逻辑是优雅美好的语言。在程序语言界，数理逻辑已经成为一种灾害，明明很容易就能解释清楚的语义，非得写成一堆稀奇古怪，含义混淆的逻辑公式。殊不知其实数理逻辑也是有很大的历史遗留问题和误区的。研究逻辑学的人经常遇到各种“不可判定”（undecidable）问题和所谓“悖论”（paradox），研究几十年也没搞清楚，而其实那些问题都是他们自己造出来的。你只需要把语言改一下，去掉一些不必要的功能，问题就没了。但逻辑学家们总喜欢跟你说，那是某天才老祖宗想出来的，多么多么的了不起啊，不能改！用一阶逻辑（first-order logic）这样的东西，你可以写出一些毫无意义的语句。逻辑老师们会告诉你，记住啦，这些是没有意义的，如果写出来这些东西，是你的问题！他们没有意识到，如果一个人可以用一个语言写出毫无意义的东西，那么这问题在于这个语言，而不在于这个人。一阶逻辑号称可以“表达所有数学”，结果事实却是，没有几个数学家真的可以用它表达很有用的知识。到后来，稍微明智一点的逻辑学家们开始研究这些老古董语言到底出了什么毛病，于是他们创造了 Model Theory 这样的理论。写出一些长篇大部头，用于“验证”这些逻辑语言的合理性。这些问题在我看来都是显而易见的，因为很多逻辑的语言根本就不是很好很有用的东西。去研究它们“为什么有毛病”，其实是白费力气。自己另外设计一个更好语言就完事了。在我看来，除了现代逻辑学的鼻祖 Gottlob Frege 理解了逻辑的精髓，其它逻辑学家基本都是照本宣科，一知半解。他们喜欢把简单的问题搞复杂，制造一些新名词，说得玄乎其玄灵丹妙药似的。如果你想了解逻辑学的精华，建议你看看 Frege 的文集。看了之后你也许会发现，Frege 思想的精华，其实已经融入在几乎所有的程序语言里了。编程是一门艺术从上面你也许已经明白了，普通程序员使用的编程语言，就算是 C++ 这样毛病众多的语言，其实也已经比数学家使用的语言好很多。用数学的语言可以写出含糊复杂的证明，在期刊或者学术会议上蒙混过关，用程序语言写出来的代码却无法混过计算机这道严格的关卡。因为计算机不是人，它不会迷迷糊糊的点点头让你混过去，或者因为你是大师就不懂装懂。代码是需要经过现实的检验的。如果你的代码有问题，它迟早会导致出问题。计算机科学并不是数学的一个分支，它在很大程度上是优于数学，高于数学的。有些数学的基本理论可以被计算机科学所用，然而计算机科学并不是数学的一部分。数学在语言方面带有太多的历史遗留糟粕，它其实是泥菩萨过河，自身难保，它根本解决不了编程中遇到的实际问题。编程真的是一门艺术，因为它符合艺术的各种特征。艺术可以利用科学提供的工具，然而它却不是科学的一部分，它的地位也并不低于科学。和所有的艺术一样，编程能解决科学没法解决的问题，满足人们新的需求，开拓新的世界。所以亲爱的程序员们，别再为自己不懂很多数学而烦恼了。数学并不能帮助你写出好的程序，然而能写出好程序的人，却能更好的理解数学。我建议你们先学编程，再去看数学。</span><br>
</p><p><b>新北產業園區: </b><br>
<span>那我把所有數學符號翻譯成他想要的語言之後，他的高數能考滿分麼？</span><br>
</p><p><b>古畑任三郎2015: </b><br>
</p><p><b>bl0ck: </b><br>
<span>太长了，标题和结尾看了一下没啥问题</span><br>
</p><p><b>beckuse: </b><br>
<span>通篇只拘泥于数学得表达语言？然后就得出结论计算机科学并不是数学的一个分支，它在很大程度上是优于数学，高于数学的。</span><br>
</p><p><b>消亡值语义: </b><br>
<span>看来数学学的不好，是因为这门学科太扭曲混杂了，掉进了越看不懂越牛逼的陷阱</span><br>
</p><p><b>afsd109: </b><br>
<span>俺们数学就是根据几个几千年前的聪明人没事的时候xjb捣鼓的来的公理为基础捣鼓出来，后来的聪明人再xjb往上糊点东西建立起来的破屋子啦</span><br>
</p><p><b>shsty: </b><br>
<span>用完全相同的理由可以证明，数学是艺术，而编程不是</span><br>
</p><p><b>adrftgyh: </b><br>
<span>这文只能说明研究数学的那帮人的语文不过关~~~</span><br>
</p><p><b>轩辕夜羽: </b><br>
<span>计算机科学 - 数学</span><br>
<span>计算机语言 - 数学语言</span><br>
<span>你数学好不好我是不知道，你的语文大约是不太行</span><br>
</p><p><b>yunxyz: </b><br>
<span>王垠虽然没情商，这篇文章也继承了他一贯的自以为是，但是其中也有些东西是有道理的。另外把计算机科学拔高到数学之上，我只能说王垠还没变，还是那个二百五</span><br>
</p><p><b>naclken.: </b><br>
<span>都说数学不是科学</span><br>
<span>那计算机科学算科学么</span><br>
</p><p><b>诚司: </b><br>
<span> 本帖最后由 诚司 于 2019-6-27 15:05 编辑 </span><br>
<span>虽然王大仙这文章漏洞百出，而且他之前写的一个这种主题的文也是这样，但是肛道理，一个学科非要给自己找个爹，还是八竿子打不着的是挺蠢的。</span><br>
<span>做化学的也没说物理是化学的基础，先去学物理然后从第一原理计算所有反应啊，尽管量子化学是这么干的，但不是化学的全部。</span><br>
<span>这年头做深度学习实验的都要说自己是在说数学了，不这么说的话就有人跳出来说你是调参侠，真的懂的大牛都是用数学原理调参的，还不止一个人这么说，恐怕用的数学原理是grid search吧</span><br>
</p><p><b>精钢魔像: </b><br>
<span>有兴趣可以找本数学史来看看</span><br>
<span>数学的发展就像是玄幻小说里的散修，死掉后传承被他人继承，如此反复</span><br>
</p><p><b>CAMUS.net: </b><br>
<span>shsty 发表于 2019-6-27 14:55</span><br>
<span>用完全相同的理由可以证明，数学是艺术，而编程不是</span><br>
<span>数学是真理，谢谢。编程是用人类能看懂的编程语言写成代码，代码再经编译器转为0和1，处理器根据0和1处理数字电路开关实现布尔代数运算</span><br>
</p><p><b>就是剑鞘: </b><br>
<span>编程真的是一门艺术，因为它符合艺术的各种特征。艺术可以利用科学提供的工具，然而它却不是科学的一部分，它的地位也并不低于科学。</span><br>
<span>所以编程也不是科学……？</span><br>
</p><p><b>面半倾醋椒: </b><br>
<span>巨魔一个炼丹师们一个劲儿把自己往数学上靠，他却在撇清关系？</span><br>
</p><p><b>hunterkiller: </b><br>
<span>数学并不是计算机科学的基础    ×</span><br>
<span>数学并不是编程的基础             √</span><br>
<span>你一个码农，又不是计算机科学家，学数学当然没啥用了。</span><br>
</p><p><b>shcmzzj: </b><br>
<span>这篇算是写得最屎的一篇了，他说的那个事实我倒觉得确实如此，数学的学习不能代替计算机科学的学习，大多数时候也只是用到高中水平的数学</span><br>
<span>不过之后关于数学语言的讨论基本上也就反映的作者的数学水平也就是个高中水平吧</span><br>
</p><p><b>白影: </b><br>
<span>这人现在在干嘛？</span><br>
</p><p><b>jctc: </b><br>
<span>诚司 发表于 2019-6-27 15:03</span><br>
<span>虽然王大仙这文章漏洞百出，而且他之前写的一个这种主题的文也是这样，但是肛道理，一个学科非要给自己找个 ...</span><br>
<span>胡说，量子化学里面全都是经验参数</span><br>
<span>不信你去看DFT，好用的泛函全都是fit出来的</span><br>
</p><p><b>kamimoe: </b><br>
<span>码农是农民，不要攀附数学，给自己贴金</span><br>
<span>农民只需要能种出粮食就行了，不需要知道粮食的分子结构。</span><br>
</p><p><b>afsd109: </b><br>
<span>面半倾醋椒 发表于 2019-6-27 15:06</span><br>
<span>巨魔一个炼丹师们一个劲儿把自己往数学上靠，他却在撇清关系？</span><br>
<span>我寻思炼丹和搅农炼金不都是一个性质的么，我出不来结果就是资源和重复次数不够多。也许平常代码敲多了调参速度能快一点吧。</span><br>
</p><p><b>d2loader: </b><br>
<span>yin快点再把Coq批判一番</span><br>
<span>—— 来自 Xiaomi MI 6, Android 9上的 S1Next-鹅版 v1.3.2.1-fix-play</span><br>
</p><p><b>εRemastered: </b><br>
<span> 本帖最后由 εRemastered 于 2019-6-27 15:18 编辑 </span><br>
<span>我有这么两个问题：</span><br>
<span>1 他似乎想说：数学家花很大功夫搞的“数学语言” 绝大部分跟真正的数学没有关系，而且这些数学语言从计算机语言的角度来看烂得一逼 —— 但是设计一种好的、不允许出错的逻辑语言，难道不也是数学吗？因为它肯定不是现在那种研究人类自然语言的语言学。</span><br>
<span>2 论历史积累的糟粕，计算机真的敢说自己比数学少吗？</span><br>
<span>当然，抛开以上的问题，“所以亲爱的程序员们，别再为自己不懂很多数学而烦恼了” 这个观点还是挺有价值的。</span><br>
</p><p><b>四控大叔: </b><br>
<span>炼丹对线性代数和概率论数理统计还是有些需求的</span><br>
</p><p><b>youngkinglong: </b><br>
<span>数学用不到不是数学没用,而是你水平太差,做不了要用到数学的活。</span><br>
</p><p><b>诚司: </b><br>
<span>jctc 发表于 2019-6-27 15:12</span><br>
<span>胡说，量子化学里面全都是经验参数</span><br>
<span>不信你去看DFT，好用的泛函全都是fit出来的 ...</span><br>
<span> 那是Kohn-沈吕九定理就没给个泛函啊，你fit出来那也是第一原理</span><br>
<span>真正的证出来的第一原理…………n年前我还想用鞅不等式去证出来一个Kohn-Sham的局部和非局部泛函的error bound，做了半年有点结果但是不顺利，后来我做的一个比这个简单得多的第一原理平均场的证明的东西去投physical review都被审稿人打回来了，审稿人说他不知道什么叫ODE和PDE，你也没解释，没法看，我就想还是算了</span><br>
</p><p><b>mhfdt: </b><br>
<span>论点没错，论据没有任何实质性的东西</span><br>
<span>计算机科学不是数学，物理学的延长，而是数个学科的综合，至于对哪个学科偏重，则取决于你的进修方向</span><br>
<span>而且对于这些知识的需求，主要集中在基础信息学中，在如今的模块化开发中，则并不是那么重要。</span><br>
<span>比如基本的程序设计，看重的是逻辑</span><br>
<span>算法则是数学基本功的体现</span><br>
<span>而基础3D制作（指直接给显卡指令绘图，如OpenGL的学习应用等）则是需要拓扑，光学的知识</span><br>
<span>而物理引擎的物理模拟就更是数学与物理学的直接体现</span><br>
</p><p><b>tiro_finale: </b><br>
<span>编程仅仅是计算机科学的应用操作部分，理论部分有一大堆是统计的变种和衍生，做起来和做数学没什么区别</span><br>
</p><p><b>novem: </b><br>
<span>编程本质上还是一种工程，其中抽象是比较重要的一环</span><br>
<span>不过这个作者本身槽点太多了，文章毫无说服力</span><br>
</p><p><b>lonely1eaf: </b><br>
<span>数学符号是真的混乱……你数字上下左右4个对角都可以写角标，不同情况不同的人用意义都不一样……看机器学习的时候那矩阵角标混乱到把我看晕了</span><br>
</p><p><b>诚司: </b><br>
<span>εRemastered 发表于 2019-6-27 15:17</span><br>
<span>我有这么两个问题：</span><br>
<span>1 他似乎想说：数学家花很大功夫搞的“数学语言” 绝大部分跟真正的数学没有关系，而 ...</span><br>
<span>不要被他带歪了啊，糟粕个什么……</span><br>
<span>不可判定性和语言问题没有关系，他瞎说的而已……</span><br>
</p><p><b>Neozero: </b><br>
<span>好些人来信问我，要成为一个好的程序员，数学基础要达到什么样的程度？</span><br>
<span>程序员和计算机科学有什么关系？</span><br>
</p><p><b>prattwhitney: </b><br>
<span>计算机科学本来就不是一门科学</span><br>
<span>计算机科学这个名字的起法，就相当于说有“造楼学”这么一门学科，里面的内容从结构力学到建筑材料到土木工程到工程机械到建筑设计到室内装修什么都包含进去</span><br>
<span>这个概括本来就很有问题</span><br>
</p><p><b>cleverfox: </b><br>
<span>后面的论据基本正确，杂七杂八的数学符号确实太蠢了。但是这跟论点有什么关系呢？</span><br>
</p><p><b>OedoSoldier: </b><br>
<span>计算机科学是基础科学的一种，CS和数学的关系就如同物理和数学的关系</span><br>
</p><p><b>斜阳: </b><br>
<span>这傻逼玩意又来了</span><br>
</p><p><b>微尘: </b><br>
<span>我也隐隐约约感觉过</span><br>
<span>数学的那一套描述语言有时候扭曲含糊，自相矛盾的</span><br>
<span>作为一门重视逻辑的学科，有时候难免觉得这群人的语言习惯没有保持逻辑一致</span><br>
<span>但数学是自然生长的，好比盲人摸象，许多问题与答案的路走不走得通都不知道，更不要说开上帝视角设计一个优雅的最优路径。</span><br>
<span>程序说到底是一个工程学问题，面对的问题一定是可解的，所以写出程序不难，难点在于写出优雅，高效，经济的程序，是一个整体设计问题。</span><br>
</p><p><b>7uly: </b><br>
<span>就是剑鞘 发表于 2019-6-27 15:06</span><br>
<span>所以编程也不是科学……？</span><br>
<span>编程确实不是科学，编程本质是一种表达，他和写作更像，说是艺术没有什么问题</span><br>
</p><p><b>novem: </b><br>
<span>微尘 发表于 2019-6-27 15:47</span><br>
<span>我也隐隐约约感觉过</span><br>
<span>数学的那一套描述语言有时候扭曲含糊，自相矛盾的</span><br>
<span>作为一门重视逻辑的学科，有时候难免 ...</span><br>
<span>计算机科学我觉得主要还是</span><br>
<span>首先把实际的问题形式化。如果连这个问题的本质都搞不清楚（比如意识），肯定是没法没计算机来表达的</span><br>
<span>其次就是选择合适的模型和积木把这个东西搭建起来，工程上的问题很多都是似是非而且依赖经验的，只能近似的追求最优解</span><br>
<span>而数学就是数学本身，一种最单纯的超越了人类实践经验的知识</span><br>
</p><p><b>wardenlym: </b><br>
<span> 本帖最后由 wardenlym 于 2019-6-27 15:59 编辑 </span><br>
<span>1.八百年前的文章不要转，王银最近没有新文章，</span><br>
<span>2.要转从他博客转，别从二手新闻转</span><br>
<span>3.王垠这篇文章说的毫无问题</span><br>
<span>4.楼里所有对编程的评论都是片面的，肯定没有王垠对编程和程序语言学理解的深刻</span><br>
<span>5.百分之99.999999的人不可能有资格评论王垠的思想，尤其是觉得自己是码农的，先了解程序语言学基础再发言</span><br>
<span>6.一般的说，王垠是傻逼无需争议</span><br>
</p><p><b>illusiome: </b><br>
<span>wardenlym 发表于 2019-6-27 15:56</span><br>
<span>1.八百年前的文章不要转，王银最近没有新文章，</span><br>
<span>2.要转从他博客转，别从二手新闻转</span><br>
<span>3.王垠这篇文章说的毫无 ...</span><br>
<span>你这几点也挺傻逼的</span><br>
<span>怪不得能和傻逼wy互相理解</span><br>
</p><p><b>wardenlym: </b><br>
<span>illusiome 发表于 2019-6-27 15:58</span><br>
<span>你这几点也挺傻逼的</span><br>
<span>怪不得能和傻逼wy互相理解</span><br>
<span>愿闻其翔</span><br>
</p><p><b>pockem: </b><br>
<span>我老师当年和我说：计算机这东西没有人有理由学不好，因为全部都是人类自己创造的。</span><br>
</p><p><b>zzzzv: </b><br>
<span>不需要数学的那个叫 软件工程</span><br>
</p><p><b>寺川愛美: </b><br>
<span>不完全是錯的，相當一部分值得反思，特別是篩走了他的自大後的核心思想</span><br>
</p><p><b>lvseqiji: </b><br>
<span>Yinwang最近应该是投身机器学习捞钱去了, 最新的文章是尬吹机器学习</span><br>
<span>—— 来自 HUAWEI JSN-AL00a, Android 9上的 S1Next-鹅版 v2.1.0-play</span><br>
</p><p><b>drodchang: </b><br>
<span>数学的符号体系有很大问题，倒是很多人都认同</span><br>
</p><p><b>miragez: </b><br>
<span>再过段时间怕不是图灵和冯诺依曼都要不认了。</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1842646[0-50]</guid>
    </item>
  </channel>
</rss>
