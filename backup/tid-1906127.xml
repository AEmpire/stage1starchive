<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>莱了！他莱了！我不是编译器专家-王垠</title>
    <link>https://bbs.saraba1st.com/2b/</link>
    <description>莱了！他莱了！我不是编译器专家-王垠</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 09 Jul 2020 11:05:18 +0000</lastBuildDate>
    <item>
      <title>莱了！他莱了！我不是编译器专家-王垠[50-100]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1906127-1-1.html</link>
      <description>莱了！他莱了！我不是编译器专家-王垠&#13;
 本帖最后由 河孢子 于 2019-12-28 18:39 编辑 

工作多年以来，我深刻体会到一个现象，那就是做过“编译器”工作的人，哪怕只做了点皮毛，都容易产生高人一等的心理，以至于在与人合作中出现各种问题。由于他们往往也存在偏执心理和理想主义，所以在恶化人际关系的同时，也可能设计出非常不合理的软件构架，浪费大量的人力物力。
&#13;
我曾经提到的 DSL 例子，就是这样的两个人。他们都自称做过编译器，所以成天在我面前高谈阔论，甚至在最基础的概念上班门弄斧，显示出一副“教育”其他人的姿态。其实他们只有一个人做过 parser，还不算是真正的编译器工作，却总显示出高深莫测的模样。像哲人一样捋捋胡子，摇摇脑袋，慢条斯理，嗯…… 另外一个完全就是外行，只是知道一些术语，成天挂在嘴边。每次他一开口，我都发现这个人并不知道他自己在说什么，却仍然洋洋得意的样子。
&#13;
我是被他们作为专家请来这个公司的，来了之后却发现他们最喜欢的事情，是在我面前显示他们才是“专家”。他们也问过我问题，可是我发现他们并不想知道答案，因为我说话的时候他们并没有在听。不管说什么问什么，他们似乎只想别人觉得他们是最聪明的人。
&#13;
“Yin，你知道 X 吗？” 当然他期望的是你说不知道，这样他就能像大师一样，把这个刚学到的术语给你讲半天。每当这个时候，我就想起一个前同事喜欢说的一句话：“你问我，是因为你不知道，还是因为你知道？” 其实他问的这个概念 X，常常是我很多年前热心过，试验过，到最后发现严重问题，抛弃了的概念。
&#13;
更糟的事情是，这其中一人还是 Haskell 语言的忠实粉丝，他总是有这样的雄心壮志，要用“纯函数式编程”改写全公司的代码……
&#13;
遇到这样的人是非常闹心的，到了什么程度？他们经常雄心勃勃用一种新的语言（Scala，Go 之类）试图改写全公司的代码，一个月之后开始唾骂这语言，两个月之后他们的项目不了了之，代码也不知道哪里去了。然后换一种语言，如此反复……
&#13;
后来实在没做出什么有用的东西，这两个人又突发奇想，开始做 DSL，闹得团队不得安宁，有点资历和经验的工程师（包括我和一位早期 Netscape 的资深工程师）都极力反对。因为烦于他们在我面前高谈阔论，而且对这个 DSL 的事情实在看不下去了，我干脆换了一个部门，不再做跟语言和编译器相关的事情。
&#13;
现在这个 DSL 做了好几年了，仍然很垃圾，然而公司人傻钱多，居然请到了 Java 界的资深人物来给他们的 DSL 写 specification。这两人也分别升职为 Principal Engineer 和 Distinguished Engineer。当然，我相信有资历的 PL 人都会明白这 DSL 的问题，我想象着这位 Java 人跟这两人将会发生的冲突。如果他对此没意见的话，那他的水平还真是值得怀疑了。
&#13;
在 Coverity 和其它公司遇到的编译器人，基本是差不多的问题。他们下意识里把自己看成是最高档次的程序员，所以对其他人总是高高在上的气势。
&#13;
Coverity 有一个 ABC 工程师，因为自己写过完整一点的静态分析，比较会折腾 C++，总是趾高气昂的对待其他人，甚至直接对别人说：“你写的这是什么代码啊？我绝对不会写出这么烂的代码！” 还有一个从斯坦福编译器教授 Alex Aiken 那里毕业的 PhD，在 Coverity 做构架师，平时一行代码不写，也不看其他人写的，说不出见解深刻点的话，因为与实际工程脱节，尽在瞎指挥。地位最高的 Distinguished Engineer，成天优哉游哉，看一些关于 parser 的话题，似乎 parser 是他终身的研究方向，也不做什么实事。
&#13;
我所在的每一家公司，只要工作跟编译器沾边，总是不免遇到这样的人。其它的我就不细讲了。
&#13;
有些美国公司在招人的时候表示，对简历里提到“做过编译器”的求职者有戒备心理，甚至直接说“我们不招编译器专业的人”。以至于我也曾经被过滤掉，因为我做过编译器相关工作。编译器专业的人本来可以做普通的程序员工作，为什么有公司如此明确不要他们呢？我现在明白为什么了，因为编译器专业人士有大概率是性格很差的团队合作者，喜欢显示出高高在上，拯救世界的姿态，无法平等而尊重的对待其他人。
&#13;
有些人也把我叫做“编译器专家”，喜欢在我面前提“编译器”这个词。我一直听着别扭，却没有正式拒绝这个称呼。每每遇到“真正”的编译器专家，我总觉得自己不是那个圈子的。不是我不能做编译器的工作，而是编译器领域人士的认识水平，理念和态度和我格格不入。
&#13;
所以我应该明确表个态：我不是编译器专家，而且我看不起编译器这个领域。我一般不会居高临下看低能力不如我的人，然而对于认识肤浅却又自视很高的人，我确实会表示出藐视的态度。现在我的态度是针对编译器这整个领域。真的，我看这些人不顺眼很多年了。
&#13;
就最后研究的领域，我是一个编程语言（PL）研究者，从更广的角度来看，我是一个计算机科学家。有人听了“科学家”一词总是误以为我在抬高自己，而在我心目中“科学家”仅仅是一个职业，就像“厨师”一样，并不说明一个人的水平和地位。科学家有好的，也有很差，素质很低的。PL 研究者被叫做“计算机科学家”是很恰当的，因为 PL 领域研究的其实不只是语言，而是计算的本质。通常人公认的计算机科学鼻祖 Alan Turing 也可以算是一个 PL 研究者，虽然他认识水平比较一般。
&#13;
IT 业人士经常混淆编程语言（PL）和编译器两个领域，而其实 PL 和编译器是很不一样的。真懂 PL 的人去做编译器也会比较顺手，而编译器专业的却不一定懂 PL。为什么呢？因为 PL 研究涵盖了计算最本质的原理，它不但能解释语言的语义，而且能解释处理器的构架和工作原理。当然它也能解释编译器是怎么回事，因为编译器只不过是把一种语言的语义，利用另外一种语言表达出来，也就是翻译一下。PL 研究所用的编程范式和技巧，很多可以用到编译器的构造中去，但却比编译器的范畴广阔很多。
&#13;
深入研究过 PL 的人，能从本质上看明白编译器里在做什么。所以编译器算是 PL 思想的一种应用，然而 PL 的应用却远远不止做编译器。每次听到有人说我是做编译器的，我都觉得是一种贬低。我只不过拿精髓的理念稍作转换和适应，做了点编译器的事情，就被人叫做“编译器专家”，而我根本不是局限在这个方向。
&#13;
专门做编译器的人，一般是专注于“实现”别人已经设计好的语言，比如 C，C++。他们必须按照语言设计者写好的语言规范（specification）来写编译器，所以在语言方面并没有发挥的空间，没有机会去理解语言设计的微妙之处。许多做编译器的人并不是从零开始写的，而是拿现成的编译器来修改，所以他们往往被已经存在的，具体的构架限制了想象力。极少有编译器人完整实现过一个语言，都是在已有的基础上小改一下。这限制了他们可以获得的全局洞察力。
&#13;
很多编译器工程师并没有接受过系统的 PL 理论教育，有些甚至是半路出家，在学校里根本没碰过编译器，也没研究过 PL。比如我的第一个公司 Coverity，招进去的很多人从来没碰过编译器，也不懂 PL。我进去不久，Coverity 的 VP 满口牛气向新人宣布：“我们能教会你们一切！” 然而很可惜，PL 的精华根本不是一个公司在短期能够传授的。Coverity 没有这个能力，Google，Facebook，Intel，微软…… 都没有这个能力。
&#13;
很多半路出家的编译器工作者以为在公司跟着做项目，折腾下 LLVM 之类，就会明白所有的原理。然而事实是很多人这样做了十几年，仍然不明白最基础的原理，因为他们被具体的实现限制了想象力。PL 理论联系着计算的本质，不明白这些原理就只能看到肤浅的表面，死记硬背，遇到新的现象就没法理解了。跟 LLVM 专家聊天，我很多时候发现他们的知识是死的，僵化在 LLVM 具体的实现里了。
&#13;
由于缺乏对 PL 理论的深入研究，编译器人往往用井底之蛙的眼光来看待语言，总以为他们实现过的语言（比如 C++）就是一切。一个语言为什么那样设计？不知道。它还可以如何改进？不知道。“它就是那个样子！” 这是我常听编译器人说的话。
&#13;
许多编译器人把 C++ 的创造者 Bjarne Stroustrup 奉为神圣，却不知道 Stroustrup 在 PL 领域并不是闪耀的明星。Stroustrup 曾经在 2011 年 11 月 11 日来到 IU 进行关于 C++11 的演讲，IU 的资深 PL 教授们都有到场。Stroustrup 谦卑的说：“我需要向你们学习很多东西来改进 C++。” 他说的是实话，因为 IU 的教授们在语言设计上确实比他强很多。Stroustrup 的整场演讲，我没有看到任何新颖的突破，全都是几十年早已出现，我天天都在用的东西。然而这些 C++ 的改进被编译器人看作是重大的历史性的突破，因为他们很多人根本没用过其它语言，甚至不知道它们的存在。
&#13;
后来一个能力比较弱的 PL 同学进入了 C++ 委员会，为改进 C++ 做一些事情。从她的描述和表现，我感觉 C++ 委员会气氛十分的官僚，古板和愚钝。她进了 C++ 委员会之后，感觉整个人都傻了一样，很肤浅的小事也说得眉飞色舞，好像什么重大的突破一样。她已经不再是曾经那个实在的同学了。真懂 PL 的一些同学，很少有混进 C++ 委员会的，因为那意味着要利用另外的关系网，让一些自己根本看不起的人骑在自己头上，必须先帮他们做一些瞎扯淡的事情。
&#13;
编译器人所崇拜的大师，在真正的 PL 研究者眼里其实不算什么。编译器人与 PL 研究者在见识上的差距是非常明显的。
&#13;
实际上做编译器是很无聊的工作，大部分时候只是把别人设计的语言，翻译成另外的人设计的硬件指令。所以编译器领域处于编程语言（PL）和计算机体系构架（computer architecture）两个领域的夹缝中，上面的语言不能改，下面的指令也不能改，并没有很大的创造空间。
&#13;
编译器领域几十年来翻来覆去都是那几个编程模式和技巧，玩来玩去也真够无聊的。起初觉得新鲜，熟悉了之后也就那个样了。很多程序员都懂得避免“低水平重复”，可是由于没有系统的学习过编译器，他们往往误以为做编译器是更高级，更有趣的工作，而其实编译器领域是更加容易出现低水平重复的地方，因为它的创造空间非常有限。
&#13;
同样的编译优化技巧，在 A 公司拿来做 A 语言的编译器，到了 B 公司拿来做 B 语言的编译器…… 大同小异，如此反复。运气好点，你可能遇到 C，C++，Java。运气不好，你可能遇到 JavaScript，PHP，Go 之类的怪胎，甚至某种垃圾 DSL。但公司有要求，无论语言设计如何垃圾，硬件指令设计如何繁琐，你编译出来的指令必须能正确运行所有这语言写出来的代码。你说这活是不是很苦逼？
&#13;
虽然苦逼，编译器人往往自高自大，高估自己在整个 IT 领域里的地位，看低其它程序员。编译器人很多认为自己懂了编程语言的一切，而其实他们只是一知半解。从我之前怼 Chris Lattner 的一些文章（链接1，链接2）你也许可以看出来，虽然是编译器领域声名显赫的人物，却在 Swift 语言的设计中犯下我一眼就看出来的严重而低级的错误，改了一次居然还没对。在发布之前随便找个 PL 研究者商量一下，也不至于犯这样的错误。这就是所谓“骄傲使人落后”吧。
&#13;
这也说明了世人对于编译器领域的误解。像 Apple 这样稳健的公司，也不免误以为顶级的编译器工程师就是最好的 PL 研究者。他们并不明白 PL 研究者是跟编译器工程师很不一样的。编译器领域最重要的教材，龙书和虎书，在我看来也有很多一知半解，作者自己都稀里糊涂的内容。而且花了大量篇幅讲 parser 这种看似高深，实则肤浅的话题，浪费读者太多时间，误导他们认为 parser 是至关重要的技术。以至于很多人上完编译器课程，只学会了写 parser，对真正关键的部分没能理解。龙书很难啃，为什么呢，因为作者自己都不怎么懂。虎书号称改进了龙书，结果还是很难啃，感觉只是换了一个封面而已。
&#13;
我曾经跟虎书作者 Andrew Appel 的一个门徒合作过，当时这人在 IU 做助理教授。借着一次我跟她做 independent study 的机会，逼我写毫无意义的论文，而且对人非常的 push 和虚伪。作为普林斯顿大学毕业的 PhD，学识水平跟 IU 的其他教授格格不入，却在待人接物方面显示出各种“贱”，对编译器领域的“牛人”各种跪舔，随时都在显示自己以前在某某人身边工作过，那神情好像在说“你们见识过吗？” 那是我在 IU 度过的最难受的一个学期，这使我对“编译器人”的偏见又加深一层。
&#13;
编译器领域的顶级人物如此，其它声称做过编译器的人也可想而知了。大部分自称做过编译器的人，恐怕连最基本的的编译器都没法从头写出来。利用 LLVM 已有的框架做点小打小闹的优化，就号称自己做过编译器了。许多编译器人士死啃书本，肤浅的记忆各种术语（比如 SSA），死记硬背具体实现细节（比如 LLVM 的 IR），看不透，无法灵活变通。所以我常说，编译器是计算机界死知识最多，教条主义最严重的领域。经常是某人想出一个做法，起个名字，其他人就照做，死记硬背，而且把这名字叫得特别响亮。你要是一时想不起这名字是什么意思，立马被认为是法国人不知道拿破仑，中国人不知道毛泽东。你不是做编译器的！
&#13;
现在因为 AI 的泡沫，很多人转向所谓“AI 框架”，“AI 编译器”。半路出家的“AI 框架工程师”和“AI 编译器工程师”们，在别人写出来的框架上小打小闹优化一下，就以为自己做的是世界上最前沿的工作，却不知道深入研究过 PL 的人其实很容易就看破了那些东西。很多 AI 框架工程师嘴里各种奇怪的术语，却看不透所谓“AI 框架”只不过是“可求导编程语言”，完全不能从高级语言和逻辑的角度去看问题。
&#13;
AI 框架和编译器里面的原理和本质很容易被 PL 理论解释，PL 研究者能够为这些项目指出正确的方向，避免不必要的弯路。然而这些自诩为“编译器人”的 AI 框架工程师们完全意识不到这一点，自高自大，膜拜权威，完全没有去听 PL 研究者在说什么，甚至觉得能“教育”比自己看得透的人。
&#13;
每一个大公司都要趁着 AI 这个热度做自己的“AI 框架”，“AI 编译器”，唯恐不做自己的框架，就会在业界丢面子，所以一窝蜂而上。一定要聘用名声很大的 AI 框架专家来公司站台，虽然也不知道他最后能做出什么来。所有 AI 框架和编译器都大同小异，属于无谓的重复劳动。有些人捣鼓一下这个框架，然后用同样的技巧去捣鼓另外一个，中间都是一些工程性的脏活。这种事情真是非常无聊。
&#13;
AI 的热潮正在褪去，大部分 AI 公司会在一年之内失败。“AI 编译器”的工作也会濒临灭绝。所以任凭他们自己瞎蒙乱撞吧，反正坚持不了多久了。
&#13;
这就是为什么虽然有多次编译器的工作机会，包括 Apple 的 LLVM 部门，我最后都没去。进入 Intel 的时候，本来编译器部门也欢迎我，可是再三考虑之后还是选择了其它方向。因为我很清楚的记得，每一次做编译器相关工作都是非常压抑的，需要面对一些沉闷古板而自以为是的人，而且内容真的是重复，无聊和枯燥。
&#13;
我唯一敬佩的编译器作者是 Kent Dybvig，但我也不想跟他一起做编译器。最近很多芯片公司的“AI 编译器”部门找我，我全都拒绝了。我不喜欢身边围绕着这些人，做着这些事。我宁愿去卖烧饼也不想做编译器。
&#13;
由于编译器人的性格特征，除非一个公司专门要做编译器，否则对于曾经做过编译器，想换个方向的求职者，在面试的时候最好深刻了解他们的性格，态度和做事方式，看他们是否能看淡这些，能否平等对待其他人，能否理性而实在的对待工程。否则自视很高的“编译器人”进了公司，很可能对团队成为一种灾难。
&#13;
我写这篇文章是为了警醒广大 IT 公司，也是为了在精神上支持其它程序员。我希望他们不要被编译器的“难度”迷惑了，不要被编译器人吓唬和打压。你们做的并不是更低级，更无聊的工作。正好相反，真正可以发挥创造力的空间并不在底层的编译器一类的东西，而在更接近应用和现实的地方。
&#13;
每当有人向我表示编译器高深莫测，向往却又高攀不上，我都会给他打一个比方：做编译器就像做菜刀。你可以做出非常好的菜刀，然而你终究只是一个铁匠。铁匠不知道如何用这菜刀做出五花八门，让人心旷神怡，米其林级别的菜肴，因为那是大厨的工作。要做菜还是要打铁，那是你自己的选择，并没有贵贱之分。</description>
      <content:encoded><![CDATA[<p><b>mintpie: </b><br>
<span>Programming Language和Compiler确实是两门分开的课程。以我个人的学习经历来说，PL确实是计算机各个领域里最难以理解，最接近“理论研究”的东西，计算机大部分分支都更像工科而不是理科。当然，我是把算法和计算理论算做数学而非计算机科学。</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1906127[50-100]</guid>
    </item>
    <item>
      <title>莱了！他莱了！我不是编译器专家-王垠[0-50]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1906127-1-1.html</link>
      <description>莱了！他莱了！我不是编译器专家-王垠&#13;
 本帖最后由 河孢子 于 2019-12-28 18:39 编辑 

工作多年以来，我深刻体会到一个现象，那就是做过“编译器”工作的人，哪怕只做了点皮毛，都容易产生高人一等的心理，以至于在与人合作中出现各种问题。由于他们往往也存在偏执心理和理想主义，所以在恶化人际关系的同时，也可能设计出非常不合理的软件构架，浪费大量的人力物力。
&#13;
我曾经提到的 DSL 例子，就是这样的两个人。他们都自称做过编译器，所以成天在我面前高谈阔论，甚至在最基础的概念上班门弄斧，显示出一副“教育”其他人的姿态。其实他们只有一个人做过 parser，还不算是真正的编译器工作，却总显示出高深莫测的模样。像哲人一样捋捋胡子，摇摇脑袋，慢条斯理，嗯…… 另外一个完全就是外行，只是知道一些术语，成天挂在嘴边。每次他一开口，我都发现这个人并不知道他自己在说什么，却仍然洋洋得意的样子。
&#13;
我是被他们作为专家请来这个公司的，来了之后却发现他们最喜欢的事情，是在我面前显示他们才是“专家”。他们也问过我问题，可是我发现他们并不想知道答案，因为我说话的时候他们并没有在听。不管说什么问什么，他们似乎只想别人觉得他们是最聪明的人。
&#13;
“Yin，你知道 X 吗？” 当然他期望的是你说不知道，这样他就能像大师一样，把这个刚学到的术语给你讲半天。每当这个时候，我就想起一个前同事喜欢说的一句话：“你问我，是因为你不知道，还是因为你知道？” 其实他问的这个概念 X，常常是我很多年前热心过，试验过，到最后发现严重问题，抛弃了的概念。
&#13;
更糟的事情是，这其中一人还是 Haskell 语言的忠实粉丝，他总是有这样的雄心壮志，要用“纯函数式编程”改写全公司的代码……
&#13;
遇到这样的人是非常闹心的，到了什么程度？他们经常雄心勃勃用一种新的语言（Scala，Go 之类）试图改写全公司的代码，一个月之后开始唾骂这语言，两个月之后他们的项目不了了之，代码也不知道哪里去了。然后换一种语言，如此反复……
&#13;
后来实在没做出什么有用的东西，这两个人又突发奇想，开始做 DSL，闹得团队不得安宁，有点资历和经验的工程师（包括我和一位早期 Netscape 的资深工程师）都极力反对。因为烦于他们在我面前高谈阔论，而且对这个 DSL 的事情实在看不下去了，我干脆换了一个部门，不再做跟语言和编译器相关的事情。
&#13;
现在这个 DSL 做了好几年了，仍然很垃圾，然而公司人傻钱多，居然请到了 Java 界的资深人物来给他们的 DSL 写 specification。这两人也分别升职为 Principal Engineer 和 Distinguished Engineer。当然，我相信有资历的 PL 人都会明白这 DSL 的问题，我想象着这位 Java 人跟这两人将会发生的冲突。如果他对此没意见的话，那他的水平还真是值得怀疑了。
&#13;
在 Coverity 和其它公司遇到的编译器人，基本是差不多的问题。他们下意识里把自己看成是最高档次的程序员，所以对其他人总是高高在上的气势。
&#13;
Coverity 有一个 ABC 工程师，因为自己写过完整一点的静态分析，比较会折腾 C++，总是趾高气昂的对待其他人，甚至直接对别人说：“你写的这是什么代码啊？我绝对不会写出这么烂的代码！” 还有一个从斯坦福编译器教授 Alex Aiken 那里毕业的 PhD，在 Coverity 做构架师，平时一行代码不写，也不看其他人写的，说不出见解深刻点的话，因为与实际工程脱节，尽在瞎指挥。地位最高的 Distinguished Engineer，成天优哉游哉，看一些关于 parser 的话题，似乎 parser 是他终身的研究方向，也不做什么实事。
&#13;
我所在的每一家公司，只要工作跟编译器沾边，总是不免遇到这样的人。其它的我就不细讲了。
&#13;
有些美国公司在招人的时候表示，对简历里提到“做过编译器”的求职者有戒备心理，甚至直接说“我们不招编译器专业的人”。以至于我也曾经被过滤掉，因为我做过编译器相关工作。编译器专业的人本来可以做普通的程序员工作，为什么有公司如此明确不要他们呢？我现在明白为什么了，因为编译器专业人士有大概率是性格很差的团队合作者，喜欢显示出高高在上，拯救世界的姿态，无法平等而尊重的对待其他人。
&#13;
有些人也把我叫做“编译器专家”，喜欢在我面前提“编译器”这个词。我一直听着别扭，却没有正式拒绝这个称呼。每每遇到“真正”的编译器专家，我总觉得自己不是那个圈子的。不是我不能做编译器的工作，而是编译器领域人士的认识水平，理念和态度和我格格不入。
&#13;
所以我应该明确表个态：我不是编译器专家，而且我看不起编译器这个领域。我一般不会居高临下看低能力不如我的人，然而对于认识肤浅却又自视很高的人，我确实会表示出藐视的态度。现在我的态度是针对编译器这整个领域。真的，我看这些人不顺眼很多年了。
&#13;
就最后研究的领域，我是一个编程语言（PL）研究者，从更广的角度来看，我是一个计算机科学家。有人听了“科学家”一词总是误以为我在抬高自己，而在我心目中“科学家”仅仅是一个职业，就像“厨师”一样，并不说明一个人的水平和地位。科学家有好的，也有很差，素质很低的。PL 研究者被叫做“计算机科学家”是很恰当的，因为 PL 领域研究的其实不只是语言，而是计算的本质。通常人公认的计算机科学鼻祖 Alan Turing 也可以算是一个 PL 研究者，虽然他认识水平比较一般。
&#13;
IT 业人士经常混淆编程语言（PL）和编译器两个领域，而其实 PL 和编译器是很不一样的。真懂 PL 的人去做编译器也会比较顺手，而编译器专业的却不一定懂 PL。为什么呢？因为 PL 研究涵盖了计算最本质的原理，它不但能解释语言的语义，而且能解释处理器的构架和工作原理。当然它也能解释编译器是怎么回事，因为编译器只不过是把一种语言的语义，利用另外一种语言表达出来，也就是翻译一下。PL 研究所用的编程范式和技巧，很多可以用到编译器的构造中去，但却比编译器的范畴广阔很多。
&#13;
深入研究过 PL 的人，能从本质上看明白编译器里在做什么。所以编译器算是 PL 思想的一种应用，然而 PL 的应用却远远不止做编译器。每次听到有人说我是做编译器的，我都觉得是一种贬低。我只不过拿精髓的理念稍作转换和适应，做了点编译器的事情，就被人叫做“编译器专家”，而我根本不是局限在这个方向。
&#13;
专门做编译器的人，一般是专注于“实现”别人已经设计好的语言，比如 C，C++。他们必须按照语言设计者写好的语言规范（specification）来写编译器，所以在语言方面并没有发挥的空间，没有机会去理解语言设计的微妙之处。许多做编译器的人并不是从零开始写的，而是拿现成的编译器来修改，所以他们往往被已经存在的，具体的构架限制了想象力。极少有编译器人完整实现过一个语言，都是在已有的基础上小改一下。这限制了他们可以获得的全局洞察力。
&#13;
很多编译器工程师并没有接受过系统的 PL 理论教育，有些甚至是半路出家，在学校里根本没碰过编译器，也没研究过 PL。比如我的第一个公司 Coverity，招进去的很多人从来没碰过编译器，也不懂 PL。我进去不久，Coverity 的 VP 满口牛气向新人宣布：“我们能教会你们一切！” 然而很可惜，PL 的精华根本不是一个公司在短期能够传授的。Coverity 没有这个能力，Google，Facebook，Intel，微软…… 都没有这个能力。
&#13;
很多半路出家的编译器工作者以为在公司跟着做项目，折腾下 LLVM 之类，就会明白所有的原理。然而事实是很多人这样做了十几年，仍然不明白最基础的原理，因为他们被具体的实现限制了想象力。PL 理论联系着计算的本质，不明白这些原理就只能看到肤浅的表面，死记硬背，遇到新的现象就没法理解了。跟 LLVM 专家聊天，我很多时候发现他们的知识是死的，僵化在 LLVM 具体的实现里了。
&#13;
由于缺乏对 PL 理论的深入研究，编译器人往往用井底之蛙的眼光来看待语言，总以为他们实现过的语言（比如 C++）就是一切。一个语言为什么那样设计？不知道。它还可以如何改进？不知道。“它就是那个样子！” 这是我常听编译器人说的话。
&#13;
许多编译器人把 C++ 的创造者 Bjarne Stroustrup 奉为神圣，却不知道 Stroustrup 在 PL 领域并不是闪耀的明星。Stroustrup 曾经在 2011 年 11 月 11 日来到 IU 进行关于 C++11 的演讲，IU 的资深 PL 教授们都有到场。Stroustrup 谦卑的说：“我需要向你们学习很多东西来改进 C++。” 他说的是实话，因为 IU 的教授们在语言设计上确实比他强很多。Stroustrup 的整场演讲，我没有看到任何新颖的突破，全都是几十年早已出现，我天天都在用的东西。然而这些 C++ 的改进被编译器人看作是重大的历史性的突破，因为他们很多人根本没用过其它语言，甚至不知道它们的存在。
&#13;
后来一个能力比较弱的 PL 同学进入了 C++ 委员会，为改进 C++ 做一些事情。从她的描述和表现，我感觉 C++ 委员会气氛十分的官僚，古板和愚钝。她进了 C++ 委员会之后，感觉整个人都傻了一样，很肤浅的小事也说得眉飞色舞，好像什么重大的突破一样。她已经不再是曾经那个实在的同学了。真懂 PL 的一些同学，很少有混进 C++ 委员会的，因为那意味着要利用另外的关系网，让一些自己根本看不起的人骑在自己头上，必须先帮他们做一些瞎扯淡的事情。
&#13;
编译器人所崇拜的大师，在真正的 PL 研究者眼里其实不算什么。编译器人与 PL 研究者在见识上的差距是非常明显的。
&#13;
实际上做编译器是很无聊的工作，大部分时候只是把别人设计的语言，翻译成另外的人设计的硬件指令。所以编译器领域处于编程语言（PL）和计算机体系构架（computer architecture）两个领域的夹缝中，上面的语言不能改，下面的指令也不能改，并没有很大的创造空间。
&#13;
编译器领域几十年来翻来覆去都是那几个编程模式和技巧，玩来玩去也真够无聊的。起初觉得新鲜，熟悉了之后也就那个样了。很多程序员都懂得避免“低水平重复”，可是由于没有系统的学习过编译器，他们往往误以为做编译器是更高级，更有趣的工作，而其实编译器领域是更加容易出现低水平重复的地方，因为它的创造空间非常有限。
&#13;
同样的编译优化技巧，在 A 公司拿来做 A 语言的编译器，到了 B 公司拿来做 B 语言的编译器…… 大同小异，如此反复。运气好点，你可能遇到 C，C++，Java。运气不好，你可能遇到 JavaScript，PHP，Go 之类的怪胎，甚至某种垃圾 DSL。但公司有要求，无论语言设计如何垃圾，硬件指令设计如何繁琐，你编译出来的指令必须能正确运行所有这语言写出来的代码。你说这活是不是很苦逼？
&#13;
虽然苦逼，编译器人往往自高自大，高估自己在整个 IT 领域里的地位，看低其它程序员。编译器人很多认为自己懂了编程语言的一切，而其实他们只是一知半解。从我之前怼 Chris Lattner 的一些文章（链接1，链接2）你也许可以看出来，虽然是编译器领域声名显赫的人物，却在 Swift 语言的设计中犯下我一眼就看出来的严重而低级的错误，改了一次居然还没对。在发布之前随便找个 PL 研究者商量一下，也不至于犯这样的错误。这就是所谓“骄傲使人落后”吧。
&#13;
这也说明了世人对于编译器领域的误解。像 Apple 这样稳健的公司，也不免误以为顶级的编译器工程师就是最好的 PL 研究者。他们并不明白 PL 研究者是跟编译器工程师很不一样的。编译器领域最重要的教材，龙书和虎书，在我看来也有很多一知半解，作者自己都稀里糊涂的内容。而且花了大量篇幅讲 parser 这种看似高深，实则肤浅的话题，浪费读者太多时间，误导他们认为 parser 是至关重要的技术。以至于很多人上完编译器课程，只学会了写 parser，对真正关键的部分没能理解。龙书很难啃，为什么呢，因为作者自己都不怎么懂。虎书号称改进了龙书，结果还是很难啃，感觉只是换了一个封面而已。
&#13;
我曾经跟虎书作者 Andrew Appel 的一个门徒合作过，当时这人在 IU 做助理教授。借着一次我跟她做 independent study 的机会，逼我写毫无意义的论文，而且对人非常的 push 和虚伪。作为普林斯顿大学毕业的 PhD，学识水平跟 IU 的其他教授格格不入，却在待人接物方面显示出各种“贱”，对编译器领域的“牛人”各种跪舔，随时都在显示自己以前在某某人身边工作过，那神情好像在说“你们见识过吗？” 那是我在 IU 度过的最难受的一个学期，这使我对“编译器人”的偏见又加深一层。
&#13;
编译器领域的顶级人物如此，其它声称做过编译器的人也可想而知了。大部分自称做过编译器的人，恐怕连最基本的的编译器都没法从头写出来。利用 LLVM 已有的框架做点小打小闹的优化，就号称自己做过编译器了。许多编译器人士死啃书本，肤浅的记忆各种术语（比如 SSA），死记硬背具体实现细节（比如 LLVM 的 IR），看不透，无法灵活变通。所以我常说，编译器是计算机界死知识最多，教条主义最严重的领域。经常是某人想出一个做法，起个名字，其他人就照做，死记硬背，而且把这名字叫得特别响亮。你要是一时想不起这名字是什么意思，立马被认为是法国人不知道拿破仑，中国人不知道毛泽东。你不是做编译器的！
&#13;
现在因为 AI 的泡沫，很多人转向所谓“AI 框架”，“AI 编译器”。半路出家的“AI 框架工程师”和“AI 编译器工程师”们，在别人写出来的框架上小打小闹优化一下，就以为自己做的是世界上最前沿的工作，却不知道深入研究过 PL 的人其实很容易就看破了那些东西。很多 AI 框架工程师嘴里各种奇怪的术语，却看不透所谓“AI 框架”只不过是“可求导编程语言”，完全不能从高级语言和逻辑的角度去看问题。
&#13;
AI 框架和编译器里面的原理和本质很容易被 PL 理论解释，PL 研究者能够为这些项目指出正确的方向，避免不必要的弯路。然而这些自诩为“编译器人”的 AI 框架工程师们完全意识不到这一点，自高自大，膜拜权威，完全没有去听 PL 研究者在说什么，甚至觉得能“教育”比自己看得透的人。
&#13;
每一个大公司都要趁着 AI 这个热度做自己的“AI 框架”，“AI 编译器”，唯恐不做自己的框架，就会在业界丢面子，所以一窝蜂而上。一定要聘用名声很大的 AI 框架专家来公司站台，虽然也不知道他最后能做出什么来。所有 AI 框架和编译器都大同小异，属于无谓的重复劳动。有些人捣鼓一下这个框架，然后用同样的技巧去捣鼓另外一个，中间都是一些工程性的脏活。这种事情真是非常无聊。
&#13;
AI 的热潮正在褪去，大部分 AI 公司会在一年之内失败。“AI 编译器”的工作也会濒临灭绝。所以任凭他们自己瞎蒙乱撞吧，反正坚持不了多久了。
&#13;
这就是为什么虽然有多次编译器的工作机会，包括 Apple 的 LLVM 部门，我最后都没去。进入 Intel 的时候，本来编译器部门也欢迎我，可是再三考虑之后还是选择了其它方向。因为我很清楚的记得，每一次做编译器相关工作都是非常压抑的，需要面对一些沉闷古板而自以为是的人，而且内容真的是重复，无聊和枯燥。
&#13;
我唯一敬佩的编译器作者是 Kent Dybvig，但我也不想跟他一起做编译器。最近很多芯片公司的“AI 编译器”部门找我，我全都拒绝了。我不喜欢身边围绕着这些人，做着这些事。我宁愿去卖烧饼也不想做编译器。
&#13;
由于编译器人的性格特征，除非一个公司专门要做编译器，否则对于曾经做过编译器，想换个方向的求职者，在面试的时候最好深刻了解他们的性格，态度和做事方式，看他们是否能看淡这些，能否平等对待其他人，能否理性而实在的对待工程。否则自视很高的“编译器人”进了公司，很可能对团队成为一种灾难。
&#13;
我写这篇文章是为了警醒广大 IT 公司，也是为了在精神上支持其它程序员。我希望他们不要被编译器的“难度”迷惑了，不要被编译器人吓唬和打压。你们做的并不是更低级，更无聊的工作。正好相反，真正可以发挥创造力的空间并不在底层的编译器一类的东西，而在更接近应用和现实的地方。
&#13;
每当有人向我表示编译器高深莫测，向往却又高攀不上，我都会给他打一个比方：做编译器就像做菜刀。你可以做出非常好的菜刀，然而你终究只是一个铁匠。铁匠不知道如何用这菜刀做出五花八门，让人心旷神怡，米其林级别的菜肴，因为那是大厨的工作。要做菜还是要打铁，那是你自己的选择，并没有贵贱之分。</description>
      <content:encoded><![CDATA[<p><b>河孢子: </b><br>
<span>莱了！他莱了！我不是编译器专家-王垠</span><br>
<span> 本帖最后由 河孢子 于 2019-12-28 18:39 编辑 </span><br>
<span>工作多年以来，我深刻体会到一个现象，那就是做过“编译器”工作的人，哪怕只做了点皮毛，都容易产生高人一等的心理，以至于在与人合作中出现各种问题。由于他们往往也存在偏执心理和理想主义，所以在恶化人际关系的同时，也可能设计出非常不合理的软件构架，浪费大量的人力物力。</span><br>
<span>我曾经提到的 DSL 例子，就是这样的两个人。他们都自称做过编译器，所以成天在我面前高谈阔论，甚至在最基础的概念上班门弄斧，显示出一副“教育”其他人的姿态。其实他们只有一个人做过 parser，还不算是真正的编译器工作，却总显示出高深莫测的模样。像哲人一样捋捋胡子，摇摇脑袋，慢条斯理，嗯…… 另外一个完全就是外行，只是知道一些术语，成天挂在嘴边。每次他一开口，我都发现这个人并不知道他自己在说什么，却仍然洋洋得意的样子。</span><br>
<span>我是被他们作为专家请来这个公司的，来了之后却发现他们最喜欢的事情，是在我面前显示他们才是“专家”。他们也问过我问题，可是我发现他们并不想知道答案，因为我说话的时候他们并没有在听。不管说什么问什么，他们似乎只想别人觉得他们是最聪明的人。</span><br>
<span>“Yin，你知道 X 吗？” 当然他期望的是你说不知道，这样他就能像大师一样，把这个刚学到的术语给你讲半天。每当这个时候，我就想起一个前同事喜欢说的一句话：“你问我，是因为你不知道，还是因为你知道？” 其实他问的这个概念 X，常常是我很多年前热心过，试验过，到最后发现严重问题，抛弃了的概念。</span><br>
<span>更糟的事情是，这其中一人还是 Haskell 语言的忠实粉丝，他总是有这样的雄心壮志，要用“纯函数式编程”改写全公司的代码……</span><br>
<span>遇到这样的人是非常闹心的，到了什么程度？他们经常雄心勃勃用一种新的语言（Scala，Go 之类）试图改写全公司的代码，一个月之后开始唾骂这语言，两个月之后他们的项目不了了之，代码也不知道哪里去了。然后换一种语言，如此反复……</span><br>
<span>后来实在没做出什么有用的东西，这两个人又突发奇想，开始做 DSL，闹得团队不得安宁，有点资历和经验的工程师（包括我和一位早期 Netscape 的资深工程师）都极力反对。因为烦于他们在我面前高谈阔论，而且对这个 DSL 的事情实在看不下去了，我干脆换了一个部门，不再做跟语言和编译器相关的事情。</span><br>
<span>现在这个 DSL 做了好几年了，仍然很垃圾，然而公司人傻钱多，居然请到了 Java 界的资深人物来给他们的 DSL 写 specification。这两人也分别升职为 Principal Engineer 和 Distinguished Engineer。当然，我相信有资历的 PL 人都会明白这 DSL 的问题，我想象着这位 Java 人跟这两人将会发生的冲突。如果他对此没意见的话，那他的水平还真是值得怀疑了。</span><br>
<span>在 Coverity 和其它公司遇到的编译器人，基本是差不多的问题。他们下意识里把自己看成是最高档次的程序员，所以对其他人总是高高在上的气势。</span><br>
<span>Coverity 有一个 ABC 工程师，因为自己写过完整一点的静态分析，比较会折腾 C++，总是趾高气昂的对待其他人，甚至直接对别人说：“你写的这是什么代码啊？我绝对不会写出这么烂的代码！” 还有一个从斯坦福编译器教授 Alex Aiken 那里毕业的 PhD，在 Coverity 做构架师，平时一行代码不写，也不看其他人写的，说不出见解深刻点的话，因为与实际工程脱节，尽在瞎指挥。地位最高的 Distinguished Engineer，成天优哉游哉，看一些关于 parser 的话题，似乎 parser 是他终身的研究方向，也不做什么实事。</span><br>
<span>我所在的每一家公司，只要工作跟编译器沾边，总是不免遇到这样的人。其它的我就不细讲了。</span><br>
<span>有些美国公司在招人的时候表示，对简历里提到“做过编译器”的求职者有戒备心理，甚至直接说“我们不招编译器专业的人”。以至于我也曾经被过滤掉，因为我做过编译器相关工作。编译器专业的人本来可以做普通的程序员工作，为什么有公司如此明确不要他们呢？我现在明白为什么了，因为编译器专业人士有大概率是性格很差的团队合作者，喜欢显示出高高在上，拯救世界的姿态，无法平等而尊重的对待其他人。</span><br>
<span>有些人也把我叫做“编译器专家”，喜欢在我面前提“编译器”这个词。我一直听着别扭，却没有正式拒绝这个称呼。每每遇到“真正”的编译器专家，我总觉得自己不是那个圈子的。不是我不能做编译器的工作，而是编译器领域人士的认识水平，理念和态度和我格格不入。</span><br>
<span>所以我应该明确表个态：我不是编译器专家，而且我看不起编译器这个领域。我一般不会居高临下看低能力不如我的人，然而对于认识肤浅却又自视很高的人，我确实会表示出藐视的态度。现在我的态度是针对编译器这整个领域。真的，我看这些人不顺眼很多年了。</span><br>
<span>就最后研究的领域，我是一个编程语言（PL）研究者，从更广的角度来看，我是一个计算机科学家。有人听了“科学家”一词总是误以为我在抬高自己，而在我心目中“科学家”仅仅是一个职业，就像“厨师”一样，并不说明一个人的水平和地位。科学家有好的，也有很差，素质很低的。PL 研究者被叫做“计算机科学家”是很恰当的，因为 PL 领域研究的其实不只是语言，而是计算的本质。通常人公认的计算机科学鼻祖 Alan Turing 也可以算是一个 PL 研究者，虽然他认识水平比较一般。</span><br>
<span>IT 业人士经常混淆编程语言（PL）和编译器两个领域，而其实 PL 和编译器是很不一样的。真懂 PL 的人去做编译器也会比较顺手，而编译器专业的却不一定懂 PL。为什么呢？因为 PL 研究涵盖了计算最本质的原理，它不但能解释语言的语义，而且能解释处理器的构架和工作原理。当然它也能解释编译器是怎么回事，因为编译器只不过是把一种语言的语义，利用另外一种语言表达出来，也就是翻译一下。PL 研究所用的编程范式和技巧，很多可以用到编译器的构造中去，但却比编译器的范畴广阔很多。</span><br>
<span>深入研究过 PL 的人，能从本质上看明白编译器里在做什么。所以编译器算是 PL 思想的一种应用，然而 PL 的应用却远远不止做编译器。每次听到有人说我是做编译器的，我都觉得是一种贬低。我只不过拿精髓的理念稍作转换和适应，做了点编译器的事情，就被人叫做“编译器专家”，而我根本不是局限在这个方向。</span><br>
<span>专门做编译器的人，一般是专注于“实现”别人已经设计好的语言，比如 C，C++。他们必须按照语言设计者写好的语言规范（specification）来写编译器，所以在语言方面并没有发挥的空间，没有机会去理解语言设计的微妙之处。许多做编译器的人并不是从零开始写的，而是拿现成的编译器来修改，所以他们往往被已经存在的，具体的构架限制了想象力。极少有编译器人完整实现过一个语言，都是在已有的基础上小改一下。这限制了他们可以获得的全局洞察力。</span><br>
<span>很多编译器工程师并没有接受过系统的 PL 理论教育，有些甚至是半路出家，在学校里根本没碰过编译器，也没研究过 PL。比如我的第一个公司 Coverity，招进去的很多人从来没碰过编译器，也不懂 PL。我进去不久，Coverity 的 VP 满口牛气向新人宣布：“我们能教会你们一切！” 然而很可惜，PL 的精华根本不是一个公司在短期能够传授的。Coverity 没有这个能力，Google，Facebook，Intel，微软…… 都没有这个能力。</span><br>
<span>很多半路出家的编译器工作者以为在公司跟着做项目，折腾下 LLVM 之类，就会明白所有的原理。然而事实是很多人这样做了十几年，仍然不明白最基础的原理，因为他们被具体的实现限制了想象力。PL 理论联系着计算的本质，不明白这些原理就只能看到肤浅的表面，死记硬背，遇到新的现象就没法理解了。跟 LLVM 专家聊天，我很多时候发现他们的知识是死的，僵化在 LLVM 具体的实现里了。</span><br>
<span>由于缺乏对 PL 理论的深入研究，编译器人往往用井底之蛙的眼光来看待语言，总以为他们实现过的语言（比如 C++）就是一切。一个语言为什么那样设计？不知道。它还可以如何改进？不知道。“它就是那个样子！” 这是我常听编译器人说的话。</span><br>
<span>许多编译器人把 C++ 的创造者 Bjarne Stroustrup 奉为神圣，却不知道 Stroustrup 在 PL 领域并不是闪耀的明星。Stroustrup 曾经在 2011 年 11 月 11 日来到 IU 进行关于 C++11 的演讲，IU 的资深 PL 教授们都有到场。Stroustrup 谦卑的说：“我需要向你们学习很多东西来改进 C++。” 他说的是实话，因为 IU 的教授们在语言设计上确实比他强很多。Stroustrup 的整场演讲，我没有看到任何新颖的突破，全都是几十年早已出现，我天天都在用的东西。然而这些 C++ 的改进被编译器人看作是重大的历史性的突破，因为他们很多人根本没用过其它语言，甚至不知道它们的存在。</span><br>
<span>后来一个能力比较弱的 PL 同学进入了 C++ 委员会，为改进 C++ 做一些事情。从她的描述和表现，我感觉 C++ 委员会气氛十分的官僚，古板和愚钝。她进了 C++ 委员会之后，感觉整个人都傻了一样，很肤浅的小事也说得眉飞色舞，好像什么重大的突破一样。她已经不再是曾经那个实在的同学了。真懂 PL 的一些同学，很少有混进 C++ 委员会的，因为那意味着要利用另外的关系网，让一些自己根本看不起的人骑在自己头上，必须先帮他们做一些瞎扯淡的事情。</span><br>
<span>编译器人所崇拜的大师，在真正的 PL 研究者眼里其实不算什么。编译器人与 PL 研究者在见识上的差距是非常明显的。</span><br>
<span>实际上做编译器是很无聊的工作，大部分时候只是把别人设计的语言，翻译成另外的人设计的硬件指令。所以编译器领域处于编程语言（PL）和计算机体系构架（computer architecture）两个领域的夹缝中，上面的语言不能改，下面的指令也不能改，并没有很大的创造空间。</span><br>
<span>编译器领域几十年来翻来覆去都是那几个编程模式和技巧，玩来玩去也真够无聊的。起初觉得新鲜，熟悉了之后也就那个样了。很多程序员都懂得避免“低水平重复”，可是由于没有系统的学习过编译器，他们往往误以为做编译器是更高级，更有趣的工作，而其实编译器领域是更加容易出现低水平重复的地方，因为它的创造空间非常有限。</span><br>
<span>同样的编译优化技巧，在 A 公司拿来做 A 语言的编译器，到了 B 公司拿来做 B 语言的编译器…… 大同小异，如此反复。运气好点，你可能遇到 C，C++，Java。运气不好，你可能遇到 JavaScript，PHP，Go 之类的怪胎，甚至某种垃圾 DSL。但公司有要求，无论语言设计如何垃圾，硬件指令设计如何繁琐，你编译出来的指令必须能正确运行所有这语言写出来的代码。你说这活是不是很苦逼？</span><br>
<span>虽然苦逼，编译器人往往自高自大，高估自己在整个 IT 领域里的地位，看低其它程序员。编译器人很多认为自己懂了编程语言的一切，而其实他们只是一知半解。从我之前怼 Chris Lattner 的一些文章（链接1，链接2）你也许可以看出来，虽然是编译器领域声名显赫的人物，却在 Swift 语言的设计中犯下我一眼就看出来的严重而低级的错误，改了一次居然还没对。在发布之前随便找个 PL 研究者商量一下，也不至于犯这样的错误。这就是所谓“骄傲使人落后”吧。</span><br>
<span>这也说明了世人对于编译器领域的误解。像 Apple 这样稳健的公司，也不免误以为顶级的编译器工程师就是最好的 PL 研究者。他们并不明白 PL 研究者是跟编译器工程师很不一样的。编译器领域最重要的教材，龙书和虎书，在我看来也有很多一知半解，作者自己都稀里糊涂的内容。而且花了大量篇幅讲 parser 这种看似高深，实则肤浅的话题，浪费读者太多时间，误导他们认为 parser 是至关重要的技术。以至于很多人上完编译器课程，只学会了写 parser，对真正关键的部分没能理解。龙书很难啃，为什么呢，因为作者自己都不怎么懂。虎书号称改进了龙书，结果还是很难啃，感觉只是换了一个封面而已。</span><br>
<span>我曾经跟虎书作者 Andrew Appel 的一个门徒合作过，当时这人在 IU 做助理教授。借着一次我跟她做 independent study 的机会，逼我写毫无意义的论文，而且对人非常的 push 和虚伪。作为普林斯顿大学毕业的 PhD，学识水平跟 IU 的其他教授格格不入，却在待人接物方面显示出各种“贱”，对编译器领域的“牛人”各种跪舔，随时都在显示自己以前在某某人身边工作过，那神情好像在说“你们见识过吗？” 那是我在 IU 度过的最难受的一个学期，这使我对“编译器人”的偏见又加深一层。</span><br>
<span>编译器领域的顶级人物如此，其它声称做过编译器的人也可想而知了。大部分自称做过编译器的人，恐怕连最基本的的编译器都没法从头写出来。利用 LLVM 已有的框架做点小打小闹的优化，就号称自己做过编译器了。许多编译器人士死啃书本，肤浅的记忆各种术语（比如 SSA），死记硬背具体实现细节（比如 LLVM 的 IR），看不透，无法灵活变通。所以我常说，编译器是计算机界死知识最多，教条主义最严重的领域。经常是某人想出一个做法，起个名字，其他人就照做，死记硬背，而且把这名字叫得特别响亮。你要是一时想不起这名字是什么意思，立马被认为是法国人不知道拿破仑，中国人不知道毛泽东。你不是做编译器的！</span><br>
<span>现在因为 AI 的泡沫，很多人转向所谓“AI 框架”，“AI 编译器”。半路出家的“AI 框架工程师”和“AI 编译器工程师”们，在别人写出来的框架上小打小闹优化一下，就以为自己做的是世界上最前沿的工作，却不知道深入研究过 PL 的人其实很容易就看破了那些东西。很多 AI 框架工程师嘴里各种奇怪的术语，却看不透所谓“AI 框架”只不过是“可求导编程语言”，完全不能从高级语言和逻辑的角度去看问题。</span><br>
<span>AI 框架和编译器里面的原理和本质很容易被 PL 理论解释，PL 研究者能够为这些项目指出正确的方向，避免不必要的弯路。然而这些自诩为“编译器人”的 AI 框架工程师们完全意识不到这一点，自高自大，膜拜权威，完全没有去听 PL 研究者在说什么，甚至觉得能“教育”比自己看得透的人。</span><br>
<span>每一个大公司都要趁着 AI 这个热度做自己的“AI 框架”，“AI 编译器”，唯恐不做自己的框架，就会在业界丢面子，所以一窝蜂而上。一定要聘用名声很大的 AI 框架专家来公司站台，虽然也不知道他最后能做出什么来。所有 AI 框架和编译器都大同小异，属于无谓的重复劳动。有些人捣鼓一下这个框架，然后用同样的技巧去捣鼓另外一个，中间都是一些工程性的脏活。这种事情真是非常无聊。</span><br>
<span>AI 的热潮正在褪去，大部分 AI 公司会在一年之内失败。“AI 编译器”的工作也会濒临灭绝。所以任凭他们自己瞎蒙乱撞吧，反正坚持不了多久了。</span><br>
<span>这就是为什么虽然有多次编译器的工作机会，包括 Apple 的 LLVM 部门，我最后都没去。进入 Intel 的时候，本来编译器部门也欢迎我，可是再三考虑之后还是选择了其它方向。因为我很清楚的记得，每一次做编译器相关工作都是非常压抑的，需要面对一些沉闷古板而自以为是的人，而且内容真的是重复，无聊和枯燥。</span><br>
<span>我唯一敬佩的编译器作者是 Kent Dybvig，但我也不想跟他一起做编译器。最近很多芯片公司的“AI 编译器”部门找我，我全都拒绝了。我不喜欢身边围绕着这些人，做着这些事。我宁愿去卖烧饼也不想做编译器。</span><br>
<span>由于编译器人的性格特征，除非一个公司专门要做编译器，否则对于曾经做过编译器，想换个方向的求职者，在面试的时候最好深刻了解他们的性格，态度和做事方式，看他们是否能看淡这些，能否平等对待其他人，能否理性而实在的对待工程。否则自视很高的“编译器人”进了公司，很可能对团队成为一种灾难。</span><br>
<span>我写这篇文章是为了警醒广大 IT 公司，也是为了在精神上支持其它程序员。我希望他们不要被编译器的“难度”迷惑了，不要被编译器人吓唬和打压。你们做的并不是更低级，更无聊的工作。正好相反，真正可以发挥创造力的空间并不在底层的编译器一类的东西，而在更接近应用和现实的地方。</span><br>
<span>每当有人向我表示编译器高深莫测，向往却又高攀不上，我都会给他打一个比方：做编译器就像做菜刀。你可以做出非常好的菜刀，然而你终究只是一个铁匠。铁匠不知道如何用这菜刀做出五花八门，让人心旷神怡，米其林级别的菜肴，因为那是大厨的工作。要做菜还是要打铁，那是你自己的选择，并没有贵贱之分。</span><br>
</p><p><b>河孢子: </b><br>
<span> 本帖最后由 河孢子 于 2019-12-28 18:40 编辑 </span><br>
<span>为了避免再来一个帖子，一并发了</span><br>
<span>所谓“成功”多次有人因为看不惯网络上一些人对我的嘲讽，给我类似这样的建议：“先干掉那些创始人已经老了的传统互联网企业，作为一个成功者之后，再到网上随便发个文章，他们都会阿谀奉承。而且在很多时候，想让那些人听自己的话，根本就是不可能的。只有做出成果，大杀四方的时候，他们才会臣服。”</span><br>
<span>其实这些人完全不明白我的价值和理念，没有仔细品味我的话的涵义，没有从中吸收到能量，所以他们才会在乎那些骂我的人的话，鼓励我进入“成功者”的游戏。</span><br>
<span>现在中国大众认可的所谓“成功”其实是一个圈套。如果你在乎它，为它奋斗，你就被这些人控制了，你就成为了他们的奴隶。所有在乎别人的眼光，按照大众的“成功”标准去奋斗的人，都是奴隶而已。我根本不在乎这些人的观念。</span><br>
<span>为什么很多中国人这么在乎“成功”，喜欢跟人攀比呢？因为他们习惯了被人打分。从小被家长，被老师打分，参加各种竞赛，考试，张榜排名…… 他们从来没有从自己的角度，站在更高的地方看过世界，没有审视过这些给他们打分的人，他们到底有什么资格来评判自己？</span><br>
<span>从学校出来工作或者创业，就开始被领导，被同事打分，被社会舆论，被女人，被丈母娘打分。中国社会所谓的“成功”，就是这样的一种评分。被打分的人，地位总是低于给他打分的人，所以一心想让别人认为自己是“成功人士”的人，特别在意别人眼光的人，其实地位是卑贱的。</span><br>
<span>我从很早的时候就藐视所有试图给我打分的人。我从来没有觉得竞赛的主办者有任何资格来评价我，所以从大学开始我就没参加过任何竞赛：ACM，IOI…… 现在一看到这种东西，看看他们的主办者，出题人和裁判们是什么水平，都觉得可笑。当然我就更加不会在乎任何人说我是否“成功”。</span><br>
<span>我是否成功，是我自己说了算。</span><br>
<span>如果照他说的，很多人因为我有钱，我“成功”，而对我“阿谀奉承”或者“臣服”，我会满意吗？我关心的是一个人的实质素养，他是否从内心认同和尊重我，而不是他表面上演给我看的。所以等有了钱有了地位，随便说句垃圾言论，引得一大群人奉承我，各种媒体吹捧我，其实不能满足我的人生目标。我非常的厌恶奉承我的人，总是让我恶心和不屑。</span><br>
<span>所以我根本不在乎利用“成功”来让人臣服。我有我自己对于“成功”的标准，我做我自己开心的事情，我吸引我自己喜欢和认可的人。我不在乎大众的品位，因为那往往意味着低级。</span><br>
<span>如果我真的奔着所谓“成功”去，然后再让别人来“阿谀奉承”或者“臣服”，那么我就不再是我了，我的价值就消失了。我跟公众认可的“成功人士”有什么差别呢？我走上了那些人的老路。所以这种说法就像是在说：”你去赚很多钱，成功，成为亿万富翁，那么许多的女人都会来巴结你。”</span><br>
<span>我需要的是心悦诚服，真正尊重我，我也尊重他们的人，而不是一群势利的贱人。</span><br>
<span>大众认可的那些“成功人士”，他们真的成功了吗？很多知名的互联网公司，你以为他们真的在赚钱吗？只不过制造了一堆垃圾信息而已。我劝这些人去研究一下这些公司的账本，研究一下这游戏是怎么玩的，研究一下他们给社会带来了什么实在的价值，研究一下什么叫做“泡沫”。泡沫对社会经济是一颗毒瘤，一旦破裂就会全身蔓延恶化，祸害所有人。如果我能出卖自己的良心，我早就“成功”了，然而我的“成功”标准却是跟大部分人不一样的。我根本不在乎大众眼里的“成功人士”，因为他们嘴里吐不出一句有点水准的话来。很多“成功人士”实际上是一颗颗的毒瘤。我不想成为又一颗毒瘤。</span><br>
<span>从十几年前离开清华的时候我就有了“名气”，当时还有人按照“注意力价值”给我的博客估了个值，非常不菲的数字。然而我从来没有用名气来获得许多人向往的东西：金钱和地位。我只利用我的名气来传播我内心相信的理念。我不能被收买，我不能被利用。</span><br>
<span>曾经在职的每一个公司，我都是靠实力吃饭。我写的每一行代码，说的每一句话，都以某种方式转化为实在的财富。当然，因为各种政治斗争，许多的精力还是浪费掉了，其中一些转化为了现实的“看人能力”。</span><br>
<span>当我银行里的钱用尽，靠着信用卡度日的日子里，我也从来没有考虑过出卖自己的良心。多次有人举着重金对我说：“来吧，把你的名字挂在我们网站上，一起飞黄腾达！” 看着他们的嘴脸，我直接就拒绝了。当我知道他们做着出卖良心的勾当，我直接删掉了他们。</span><br>
<span>很可惜，我看到许许多多的“成功人士”，名企高管，资深工程师，甚至常春藤名校的教授经不起金钱的诱惑，帮着低俗而居心叵测的人站台。他们有一些曾经在我心里还是有点地位的，当看到他们做出这样的事情，他们的形象瞬间毁灭了。在没见识的人眼里他们是“成功人士”，但在我这里他们是垃圾。</span><br>
<span>我早就说过，我的话本身就是价值，它们自己产生了说服力。我不需要“成功”和钱来说服其他人。总是有人对我说：“你做点什么出来他们就闭嘴了。” 然而很可惜，算你再“成功”也不会有任何人会闭嘴。网络上嘲笑我，骂我的人很多，可是你仔细看看他们是谁，他们是什么样的素质，他们嘴里吐出什么样水准的话，就觉得这一切都不重要，不在乎了。</span><br>
<span>人永远不会闭嘴，就算你再成功也一样。成功人士上街散个步，也难免遇到朝你骂脏话的小混混。你要说服他们吗？你只需要忽略他们。</span><br>
<span>有位哲人说的好：“智慧永远都不能战胜愚昧，你只有等愚昧的人慢慢死去。” 就是这个道理。愚昧的人永远不会看到你的“成功”之处，所以就算你按照其他人的标准“成功”了，他们依然会说你没有成功，依然会各种风言风语。</span><br>
<span>我写的东西都是给有心看它们的人看的，我鼓舞着这些正直善良的人。我根本不想说服反对我的人，我的“客户”只针对高素质的人群。那些骂我的人，直接作为街上遇到的低劣小混混，忽略了就行。</span><br>
<span>所以最好的做法不是试图按照大众的标准去“成功”，否则你就被这些愚蠢的人的说法控制了。很多人没有发现到底有多少人在支持我，他们只看到那些低素质的否定者。</span><br>
<span>所以我建议关注我的人直接看我的博客和微博，少去论坛类网站，因为那些地方往往是低素质人群扎堆的地方。很多人以为论坛网站是一种“社交”，可是你想想，要是一个人成天泡在那种网站上，那他在现实中该有多无聊啊，身边都没有一个真心的朋友可以出来喝茶聊天吧？</span><br>
<span>许多年轻一代的工程师，研究员，甚至教授都是看着我的文章长大的，我不需要利用“成功”和金钱去唤醒他们的心。我的话本身就是价值，直接就能进入人的心里。这些人成长起来，会比那些忽略我，嘲笑我的人强大许多倍，为人也会更加正直。到时候你们就会知道，真正的价值掌握在谁的手里。</span><br>
</p><p><b>迷的思考者: </b><br>
<span>为啥不去卖烧饼（</span><br>
</p><p><b>yunxyz: </b><br>
<span>王垠——性格差的团队合作者。</span><br>
</p><p><b>Neozero: </b><br>
<span>别骂了别骂了</span><br>
<span>—— 来自 Google Pixel 3, Android 10上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>soulogic: </b><br>
<span> 本帖最后由 soulogic 于 2019-12-28 23:56 编辑 </span><br>
<span>感觉赵海平真的让他受刺激了，他写东西挺少的，2018 年总共才写了 5 篇，最近一个月就写了 4 篇</span><br>
<span>搬运一下我以前的评价吧，因为这样子跟几年前的犯病差不多，都是拿出每个人各种鸡毛蒜皮但他又耿耿于怀的小事，如数家珍的逐一记录下来，又摆出一副“这些伤不了我才不在乎呢哼”的样子</span><br>
<span>我是非常现实的人，我知道现实中有各种困难和妥协，我信奉的是“非功不候”，就是你可能动作不够完美，但是你已经做出了人类最好成绩，那你就比所有人都牛</span><br>
<span>基于这个理由，我觉得 C++ 之父可以封神（因为基本上你上网的软件、每天玩的游戏，电脑的方方面面，几乎都是用 C++写的），但是在王垠眼里他就是个水平算不上一流的平庸之辈</span><br>
<span>作为码农，我见过太多具备各种理论知识的人，很多同事也跟王垠那样可以侃侃而谈，但我只会根据代码来评价另一个码农，talk is cheap，show me the code</span><br>
<span>感觉挺像抑郁症的。以前我是看不上自杀的，后来知道很多都是病人，及早治疗可能不至于自杀，但抑郁症也算是精神疾病</span><br>
<span>如果是个搞艺术的，每个艺术家都是独一无二的有每个人自己的风格，死一个倒还可惜，可理科男的成果，要么是被普遍承认的纯理论，其他都是工科，换句话说大家做的东西是一个路子的，只是程度不同，而程序员之所以有市场只是因为需求量大、总的工作量大，任何程序员创造的价值是可以相当程度上估算的，而不是像帕特农神庙或者梵高的《向日葵》之类的无法估价</span><br>
<span>前一段时间，想找个什么东西来着，想起这人，就顺便看了下他的主页，当时最新的一篇是《我和 Google 的故事（2015 修订版）》，觉得不可理喻，就一个实习经历耿耿于怀这么多年，指名道姓的骂，人家跟没在乎过他，只是一个事很多的实习生而已，而他却希望所有人都知道他当时的上司水平有多差，就算大家根本记不住他上司叫什么、也压根不知道他上司长什么样，然后过了三年，刚过完圣诞节没几天，他能想到的是再把这个事情再重新整理一下</span><br>
<span>我对这人的定位就是个写娱乐专栏的，以前韩寒是写点搞笑，后来不写了，他就写点可笑的，倒是也可以偶尔看看调剂调剂。看他喷很有意思的，基本把我的知识面里能涵盖的和不能涵盖的东西都给喷过了</span><br>
<span>他真的很聪明，但是一个人要想完整，光是聪明就好像汽车装满油在那停着一样，很多没有他的天资的人比他更勤奋的写代码、更努力的尝试去跟别人打交道，做出他根本没法相比的成就，他又不高兴，觉得这群傻逼写点破玩意凭什么过得比我好，就跟绝命毒师里的老白一样，对别人的最大作用是警示别人，别像他这么生活，但他比老白悲剧的是。老白毕竟只是个虚构的文艺作品中的人物，而他却得真实的活着</span><br>
</p><p><b>wxshaonv2000: </b><br>
<span>哎哟不是啦 谁会跟现实中的朋友讨论您老人家的事迹</span><br>
</p><p><b>threefcata: </b><br>
<span>通常人公认的计算机科学鼻祖 Alan Turing 也可以算是一个 PL 研究者，虽然他认识水平比较一般。</span><br>
</p><p><b>我靠不是吧: </b><br>
<span>早有人说了，这就是教科书一样的自恋型人格。</span><br>
<span>而且人都是会习惯性投射的，例如脾气暴躁的人通常觉得是其他人总在惹我生气，自恋狂也会觉得自己身边充满了自恋狂</span><br>
</p><p><b>magicianxu: </b><br>
<span>“实绩”基本上都需要别人的评判吧。按他的说法，不在期刊发paper是评审的人不够格审他，去公司是除他自己之外皆sb，不够尊重他这样的高才。那他到底能不能搞点啥出来。现在这样不就是一大号喷子，现代版祢衡……</span><br>
</p><p><b>蓝川澈: </b><br>
<span>自以为看透一切的，第一个想起浮士德里的梅菲斯特</span><br>
<span>-- 来自 能搜索的 Stage1官方 Android客户端</span><br>
</p><p><b>happydog: </b><br>
<span>他的问题很多，但是居然那么多顶级公司都招他进去，也是有意思。</span><br>
</p><p><b>cfdxiaobai: </b><br>
<span>有种说工业界(编译器)和科研界(PL)的感觉，两边互相看不上</span><br>
</p><p><b>费老师: </b><br>
<span>这是。。。作家吧</span><br>
</p><p><b>革萌: </b><br>
<span>费老师 发表于 2019-12-28 20:03</span><br>
<span>这是。。。作家吧</span><br>
<span>本来就是笔力很强的人，精神投射力可以的。</span><br>
<span>但是从这个频率看，很快就有重蹈原来的循环了。估计又要删光微博，换号。</span><br>
<span>此人是真的有一点精神疾病。</span><br>
</p><p><b>coyove: </b><br>
<span>其实最后一段话很像大公司leader“洗脑”毕业生的常用说辞：业务和架构（底层/中台。。）不分贵贱，做业务的也有很牛逼的，不是只有做架构才能证明自己。</span><br>
<span>王垠可能看透了这点，但从他的嘴里说出来，确实没有什么说服力。</span><br>
</p><p><b>onezeron: </b><br>
<span>阿兰图灵一般般，德克斯塔菜一盘</span><br>
</p><p><b>喵呜哇哈: </b><br>
<span>王银是真闲，我看都懒得看，她还有时间写这么多东西</span><br>
</p><p><b>2659646573: </b><br>
<span>好久没关注他了，从我的记忆里回想了一下，他还是很厉害的，但是不知道他在从谷歌微软出来之后做了什么，参加了什么项目？搞出了什么新思路？</span><br>
</p><p><b>wxshaonv2000: </b><br>
<span>2659646573 发表于 2019-12-28 20:40</span><br>
<span>好久没关注他了，从我的记忆里回想了一下，他还是很厉害的，但是不知道他在从谷歌微软出来之后做了什么，参 ...</span><br>
<span>前一阵说离开了英特尔啊 有人猜现在进华为了</span><br>
</p><p><b>2659646573: </b><br>
<span>wxshaonv2000 发表于 2019-12-28 20:48</span><br>
<span>前一阵说离开了英特尔啊 有人猜现在进华为了</span><br>
<span>我的记忆一直停留在他骂微软的时候了</span><br>
</p><p><b>overflowal: </b><br>
<span>wxshaonv2000 发表于 2019-12-28 20:48</span><br>
<span>前一阵说离开了英特尔啊 有人猜现在进华为了</span><br>
<span>他怎么可能进华为这种典型的不把软件当回事的公司</span><br>
<span>—— 来自 HUAWEI YAL-AL00, Android 10上的 S1Next-鹅版 v2.2.0.1</span><br>
</p><p><b>一闪一闪肋间肌: </b><br>
<span>看样子赵的那个回应是真的刺激到他了</span><br>
</p><p><b>schneehertz: </b><br>
<span>“图灵水平一般般”</span><br>
</p><p><b>dogfight: </b><br>
<span>第一段不是说他自己？</span><br>
</p><p><b>QShen: </b><br>
<span>挺好的，很有道理，我信了</span><br>
</p><p><b>驾考之耻: </b><br>
<span>25个程序员标记了</span><br>
<span>—— 来自 vivo X9, Android 7.1.2上的 S1Next-鹅版 v2.2.0</span><br>
</p><p><b>我的头很疼: </b><br>
<span>高速公路上全是逆行的,</span><br>
</p><p><b>tsubasa9: </b><br>
<span>太惨了, 我觉得出家是一条路</span><br>
</p><p><b>λ2000: </b><br>
<span>发牢骚能写这么多字出来 也是牛逼</span><br>
<span>— from HMD Global Nokia 7 plus, Android 9 of S1 Next Goose v2.0.4-play</span><br>
</p><p><b>lixianfyss: </b><br>
<span>overflowal 发表于 2019-12-28 21:12</span><br>
<span>他怎么可能进华为这种典型的不把软件当回事的公司</span><br>
<span>—— 来自 HUAWEI YAL-AL00, Android 1 ...</span><br>
<span>真进牢厂接受一下再教育没准是个好事。</span><br>
</p><p><b>ustslayer: </b><br>
<span>哈哈，真巧，我也跟Andrew Appel的大弟子做过两学期RA，他人挺好的。</span><br>
<span>我觉得王垠对于编译器夹在PL和体系架构中间的描述还是很准确的，所谓带着镣铐跳舞... 但是人在世上不能总是随心所欲（当然了，还是需要有能够随心所欲的时候，不能一点都没有），所以该捏着鼻子的时候（比如给php加JIT），还是得硬着头皮上。螺旋上升嘛，说不定未来就更好了。</span><br>
</p><p><b>spiece: </b><br>
<span>magicianxu 发表于 2019-12-28 19:05</span><br>
<span>“实绩”基本上都需要别人的评判吧。按他的说法，不在期刊发paper是评审的人不够格审他，去公司是除他自己 ...</span><br>
<span>祢衡是稍微露一手就能惊天骇地的人物，把这位和祢衡比稍微有点抬举了吧。</span><br>
</p><p><b>ひろ: </b><br>
<span> 本帖最后由 ひろ 于 2019-12-29 09:19 编辑 </span><br>
<span>老板的要求是你能把产品做出来能创造利润，并不在乎你用啥方法。王垠纠结的是你的方法及过程不完美，且认为这个产品的逼格不行不屑做这个产品</span><br>
</p><p><b>MagicalMinori: </b><br>
<span>不懂就问，他既然自称PL研究者，那么发表过什么论文啊，或者嫌弃期刊和会议的话，arxiv也行啊，大家学习学习。</span><br>
</p><p><b>7uly: </b><br>
<span>happydog 发表于 2019-12-28 19:40</span><br>
<span>他的问题很多，但是居然那么多顶级公司都招他进去，也是有意思。</span><br>
<span>我之前在另一个帖子里提过，他在微软也就是一个sde2，毕业5年左右能达到的级别，他基本功是有的，面一个基本不太需要资历和合作技能的基本岗位肯定还是能过的。大厂每年招很多人的，并不是什么了不起的事情。</span><br>
</p><p><b>7uly: </b><br>
<span>MagicalMinori 发表于 2019-12-29 10:32</span><br>
<span>不懂就问，他既然自称PL研究者，那么发表过什么论文啊，或者嫌弃期刊和会议的话，arxiv也行啊，大家学习学 ...</span><br>
<span>没有...所以别说工程能力，他的研究能力也是靠他自己尬吹</span><br>
</p><p><b>初音比良坂: </b><br>
<span>为啥通过这篇文章我觉得他对他说的那种人的形容很适合形容他自己，这种感觉太好玩了。</span><br>
</p><p><b>塞斯克法: </b><br>
<span>有一说一，碰到的做编译器的确实很多都跟他说的那样</span><br>
</p><p><b>UnderWear: </b><br>
<span>MagicalMinori 发表于 2019-12-29 10:32</span><br>
<span>不懂就问，他既然自称PL研究者，那么发表过什么论文啊，或者嫌弃期刊和会议的话，arxiv也行啊，大家学习学 ...</span><br>
<span>他会说他看不起arxiv</span><br>
</p><p><b>novem: </b><br>
<span> 本帖最后由 novem 于 2019-12-29 17:29 编辑 </span><br>
<span>C++的工程思维堪称为一种哲学，在Bjarne Stroustrup面前他算哪根葱?</span><br>
</p><p><b>费老师: </b><br>
<span>所以P10说的一句话戳到他痛处了:你做这些有什么意义呢？</span><br>
</p><p><b>暴走的饭团: </b><br>
<span>“你写这些有什么意义呢”</span><br>
</p><p><b>过河小马: </b><br>
<span>眼高手低，夸夸其谈</span><br>
</p><p><b>TJ芥末薯片: </b><br>
<span>我觉得他应该系统性地学习一下哲学或者心理学了- -</span><br>
</p><p><b>eva02eva02: </b><br>
<span>现在的编译器不是让代码量减少99%吗</span><br>
<span>-- 来自 能手机投票的 Stage1官方 iOS客户端</span><br>
</p><p><b>exia00raiser: </b><br>
<span>既没什么学术成果也没什么工程成果还擅长吹逼，也可以算是个人才了</span><br>
<span>-- 来自 能搜索的 Stage1官方 Android客户端</span><br>
</p><p><b>ohi: </b><br>
<span>onezeron 发表于 2019-12-28 20:30</span><br>
<span>阿兰图灵一般般，德克斯塔菜一盘</span><br>
<span>图灵那么年轻，PL连定义都还没吧</span><br>
<span>—— 来自 Sony SO-02J, Android 8.0.0上的 S1Next-鹅版 v2.2.0.1</span><br>
</p><p><b>overflowal: </b><br>
<span>后续：</span><br>
<span>我在 Cornell 的时候，有一个很有权势的编译器教授，从未发表有理论价值的 paper，却老在 Java 上面做文章。他和他的博士生们总是把一些其它语言几十年前已经有的“新特性”搬到 Java 上面，老酒换新瓶，发 paper 拉 funding。由于拉了很多钱，所以在系里很受宠，他的学生们在其它人面前都趾高气昂的样子。</span><br>
<span>后来这教授的一个学生去了 Facebook，帮他们做 HipHop，一个从 PHP 到 C++ 的“编译器”。其实这种“源到源”编译器做起来不算难，但给 PHP 这样劣质的语言做编译器，实在是狗血的工作，繁琐而头痛。没有任何理论价值不说，在工业界有什么价值也难说。我的一个前同事曾经对 Facebook 的这个项目发表了一个尖锐而幽默的评价：“Facebook 现在不但给母猪涂上了口红，而且真的开始 f.. 它了！”</span><br>
<span>后继 Facebook 还有 PHP VM 一类的东西，越来越离谱。后来这位同学可能也受不了，换组去做其它跟语言无关的事情了。在 PL 研究者看来，VM 也并没有什么稀奇。PL 领域有各种各样的“抽象机”（abstract machine），比如 CEK machine，它们揭示了计算的方方面面。我自己都设计实现过好几个“可逆抽象机”，它们可以进行所谓“可逆计算”。所以一个 PL 研究者很容易就能设计出一个 VM 来，它们只不过是一种经过部分优化的解释器。</span><br>
<span>每每看到编译器人说到“VM”这个词的时候那种荣耀而敬畏的神情，好像只有他们明白 VM 是什么，我就觉得好笑，外加一种说不出的滋味。编译器人虽然知道一个具体的 VM 怎么实现，知道一些死板的细节和术语，却不知道 VM 的本质是什么，不知道一个全新的，具有新特性的 VM 要怎么设计出来。</span><br>
<span>—— 来自 HUAWEI YAL-AL00, Android 10上的 S1Next-鹅版 v2.2.0.1</span><br>
</p><p><b>wyhx: </b><br>
<span>7uly 发表于 2019-12-28 19:03</span><br>
<span>我之前在另一个帖子里提过，他在微软也就是一个sde2，毕业5年左右能达到的级别，他基本功是有的，面一个 ...</span><br>
<span>sde2哪有那么难，两年工作经验完全可以</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1906127[0-50]</guid>
    </item>
  </channel>
</rss>
