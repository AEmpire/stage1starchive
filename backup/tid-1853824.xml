<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>yinwang:再谈“P vs NP”问题</title>
    <link>https://bbs.saraba1st.com/2b/</link>
    <description>yinwang:再谈“P vs NP”问题</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 09 Jul 2020 18:17:09 +0000</lastBuildDate>
    <item>
      <title>yinwang:再谈“P vs NP”问题[0-50]</title>
      <link>https://bbs.saraba1st.com/2b/thread-1853824-1-1.html</link>
      <description>yinwang:再谈“P vs NP”问题&#13;
 本帖最后由 overflowal 于 2019-8-16 13:57 编辑 

    好几年前曾经写过一篇文章表达对计算机科学里著名的 “P vs NP” 问题的看法。当时正值我人生中第 N 次研究那些东西，由于看透了却不在乎，所以写得特别简略。没想到有人看到后，还以为我没仔细学过复杂度理论，说我信口开河。我一般懒得谈论这种太理论的问题，身边也很少有人关心，所以后来干脆把文章撤了。不是我说的有什么不对，而是我懒得跟人争论。
&#13;
    没想到最近又遇到有人抓住我删掉的文章，乘机拿出来贬损我，尽其羞辱之能力。说王垠你太自以为是了，你知不知道“P vs NP”要是解决了，世界将有天翻地覆的变化，多少的计算难题会被解决，机器学习都没必要了，非对称加密全都被破解…… 跟上课似的头头是道滔滔不绝，几乎把他本科算法课本上的内容给我背了一遍，以为别人不知道一样，却没有显示出任何他自己的思想。
&#13;
    呃，我真是服了某些人背书冒术语的能力，难怪能做国内某大厂的 P10（注：不是我的在职公司）。鉴于很多人对此类问题的一知半解，反倒嘲笑别人不懂，牛逼轰轰打压其他人，我决定事后把这个问题再详细讲一下，免得以后还要为它费口舌。
&#13;
    对于初学者这篇文章有点门槛，需要学习一些东西。“P vs NP” 问题属于计算理论（Theory of Computation）的一部分——复杂度理论。计算理论不止包括复杂度理论（Complexity），还包括可计算性（Computability），也就是“停机问题”一类的内容。
&#13;
    国内大学的计算机教学一般在算法课上对复杂度理论有初级的讲授，但很少人能够真的理解。如果你没有系统的学习过复杂度理论，我建议你研读一下计算理论的专著（而不是普通的算法教材），比如 Michael Sipser 的『Introduction to the Theory of Computation』。
&#13;
    我当年在 Indiana 做研究生计算理论课助教的时候，可算是把这书给看透了…… 被逼的。其中“可计算性理论”在我将来的 PL 研究中起了比较大的启发作用，而复杂度理论的用处一般。我觉得 Sipser 的书写的不够清晰透彻，但很多学校拿它做教材，好像也没有其它特别好的替代品。
&#13;
    计算理论如此晦涩难懂，我认为图灵机是祸首。如果你能理解 lambda calculus，将会简化理解计算理论的过程。如果你想用更深刻更容易的方法理解计算理论，可以参考这篇文章的“Lambda 演算与计算理论”一节，里面会提到另一本参考书。从这篇文章你也可以看出来，我丝毫不崇拜图灵。
&#13;
“P vs NP” 真的重要吗？
&#13;
    “P vs NP” 这个问题有它的理论价值，它是有趣的问题，里面的有些思路有启发意义，值得花些时间来了解。但计算机科学界长久以来都严重夸大它的重要性，把一个很普通的问题捧上了天，吹得神乎其神。
&#13;
再加上图灵机模型在计算理论界的广泛使用，使得这门学问显得异常艰深。很多人看到图灵机就晕了，在课程上蒙混过关，考试完了就全忘了，根本无法理解里面的实质内容。正是因为很多人的不明觉厉，使得“P vs NP”登上了它在 CS 界的宝座。
&#13;
    很多人做了一辈子计算机工作，做了很多巧妙的设计构架，写了许许多多的代码，解决了很多性能难题。提到“P vs NP”，虽然一辈子都没用上这个理论，仍然顶礼膜拜。由此可见“不明觉厉”对于人们心理的威力。
&#13;
    很多人认为“P vs NP”是计算机科学最重要的问题。Clay 数学研究所甚至悬赏一百万美元解决这个问题，把它叫做数学界的 7 个千年难题之一，跟黎曼猜想并列其中。
&#13;
    好几次有人声称解决了“P vs NP”，上了新闻，闹得舆论沸沸扬扬，小编们吹得好像世界要天翻地覆了一样，把他们追捧为天才苦行僧，后来却又发现他们的结果是错的……
&#13;
    如果你真的理解了“P vs NP”的内涵，就会发现这一切都是闹剧。这个问题即使得到解决，也不能给世界带来很大变化。解决这个问题对于现实的计算，作用是微乎其微的。不管 P 是否等价于 NP，我们遇到的计算问题的难度不会因此有重大改变。
&#13;
    甚至有些数学家认为“P vs NP” 根本没有资格跟黎曼猜想一起并列于“千禧年问题”。我倒是希望有人真的解决了它，这样我们就可以切实的看到这有什么意义。
&#13;
    “P vs NP” 也许不是愚蠢的问题，但计算机科学界几十年以来夸大它的重要性的做法，是非常愚蠢的，让整个领域蒙羞。
&#13;
真正重要的数学问题被解决，应该对现实世界具有强大的作用。这种作用可以是“潜在的”，它的应用可以发生在很久以后的将来，但这必须能够被预见到。数学家们把这叫做“applicable result”（注意不叫 applied 或者 practical）。否则这个数学问题就只能被叫做“有理论价值”，“有趣”，而不能叫做“重要”。即使所谓“纯数学”，也应该有可以预见的效果。
&#13;
    很多数学家都明白黎曼猜想（Riemann hypothesis）的重要性。大数学家希尔伯特说过：“如果我沉睡了三千年醒过来，我的第一句话会是‘黎曼猜想被解决了吗？’” 假设希尔伯特还在世，他会对解决“P vs NP”有同样的渴望吗？我觉得不会。实际上，很多数学家都觉得“P vs NP”的重要性根本没法和黎曼猜想相提并论，因为我们预见不到它会产生任何重要的效果。
&#13;
什么是多项式时间？
&#13;
    很多人提到“P vs NP”就会跟你吹嘘，P 如果等于 NP，世界将有天翻地覆的变化。许许多多我们以前没法办到的事情，都将成为现实。非对称加密技术会被破解，生物化学将得到飞跃，机器学习将不再有必要……
&#13;
    这些人都忽略了一个重要的问题：什么是多项式时间。盲目的把“多项式”等同于“容易”和“高效”，导致了对 “P vs NP” 重要性的严重夸大。
&#13;
    n100 是不是多项式？是的。n1000000 也是多项式。n100100 也是多项式，n100100100 也是多项式…… 实际上，只要 n 的指数是常数，它就是一个多项式，而 n 的指数可以是任意大的常数！n 的指数可以是任意大的常数！n 的指数可以是任意大的常数！重要的事情说三遍。
&#13;
    时间复杂度 n100100100 的算法，能用吗？所以即使 P=NP，你需要的计算时间仍然可以是宇宙毁灭 N 次，其中 N 是任意的常数。
&#13;
    说到这里，又会有人跟我说你不懂，当 n 趋近于无穷的时候，非多项式总会在某个时候超越多项式，所以当 n “足够大”的时候，多项式时间的算法总是会更好。很可惜，“无穷”对于现实的问题是没有意义的。任何被叫做“重要”的问题，都应该在合理的时间内得到结果。
&#13;
    我们关心的要点不应该是“足够大”，而是“具体要多大”。精确的量化，找到实际可以用的区间，这才是合格的科学家该有的思路。计算机科学里，大 O 表示法泛滥成灾，只看最高次幂，忽略系数和常数项，也是常见的误区。我也曾经沉迷于如何把 O(n3) 的算法降低到 O(n2.9)，现在回头才发现当年是多么的幼稚。
&#13;
    “多项式时间”这个概念太宽泛太笼统。以如此笼统的概念为基础的理论，不可能对现实的计算问题产生意义。我们关心的不应该仅仅是“是否多项式”，而是“具体是什么样的多项式”。6n20 + 26n7 + 200，1000n3 + 8n2 + 9，…… 每一个多项式的曲线都是很不一样的，在各个区间它们的差别也是不一样的。多项式的幂，系数，常数项，它们的不同都会产生重大的差异。
&#13;
    这就是为什么“P=NP”没有很大意义，因为 P 本身太笼统，其内部的差异可以是天壤之别。与其试图笼统的证明 P 等价于 NP，还不如为具体的问题想出实质意义上高效的算法，精确到幂，系数，常数项。
&#13;
P!=NP 有意义吗？
&#13;
    “P vs NP”问题有两种可能性：P=NP（等价），或者 P!=NP（不等价）。以上我说明了 P=NP 的意义不大，那么要是 P!=NP 呢？
&#13;
    很多人会跟你说，要是一个问题是 NP-Hard，然后又有 P!=NP，那么我们就知道这个问题没有多项式时间的算法存在，就避免了为多项式时间算法浪费时间了。这不也有一些价值吗？
&#13;
    我并没有否认 P!=NP 是有那么一点价值：在某些时候它也许避免了浪费时间。但这种价值比较小，而且它具有误导性。
&#13;
    一个常见的 NP-Hard 问题是 SAT。如果 P!=NP，那么大家就应该放弃为它找到高效的算法吗？如果大家都这样想，那么现在的各种高效的 SAT solver 就不存在了。实际上，利用随机算法，我们在大多数时候都能比较快的解决 SAT 问题。
&#13;
    问题在于，“P vs NP”关心的只是“最坏情况”，而最坏情况也许非常罕见。有些问题大部分实际的情况都可以高效的解决，只有少数变态的情况会出现非常高的复杂度。为了这少数情况放弃大多数，这就是“P vs NP”的误导。
&#13;
    如果因为 P!=NP，你认为 NP-Hard 的问题就没有高效的算法，那你也许会误以为你可以利用这些“难题”来做非对称加密。然而 NP-Hard 并不等于没法快速解决，所以要是你因此被误导，也许会设计出有漏洞的加密算法。
&#13;
    即使 P!=NP，我们仍然不能放弃寻找重要的 NP-Hard 问题的高效算法，所以确切的证明 P!=NP 的价值也不是那么重要了。其实你只要知道 P=NP “大概不可能”，就已经能起到“节省时间”的目的了。你没必要证明它。
&#13;
什么是 NP？
&#13;
    这一节我来讲讲“P vs NP”里的“NP”到底是什么。内容比较深，看不懂的人可以跳过。
&#13;
    很多人都没搞明白 NP 是什么就开始夸夸其谈“P vs NP”的价值。 经常出现的错误，是把 NP 等同于“指数时间”。实际上 NP 代表的是“Nondeterministic Polynomial time”，也就是“非确定性图灵机”（nondeterministic Turing machine）能在多项式时间解决的那些问题。
&#13;
    什么是“非确定性图灵机”？如果你把课本上那堆图灵机的定义看明白看透了，然后又理解了程序语言理论，你会发现所谓“非确定性图灵机”可以被很简单的解释。
&#13;
    你可以把我们通常用到的程序看作是“确定性图灵机”（deterministic Turing machine）。它们遇到条件分支，在同一个时刻只能走其中一条路，不能两边同时探索。
&#13;
    那么“非确定性图灵机”呢？你可以把“非确定性图灵机”想象成一个具有“超能力”的计算机，它遇到分支语句的时候，可以同时执行 True 和 False 两个分支。它能够同时遍历任意多的程序分支，这是一台具有超能力的机器！
&#13;
    所以“P vs NP”的含义大概就是这样：请问那些需要非确定性图灵机（超能力计算机）在多项式时间才能解决的问题，能够用确定性图灵机（普通计算机）在多项式时间解决吗？
&#13;
    现在问题来了，具有如此超能力的机器存在吗？答案当然是“No！” 就算是量子计算机做成功了，也不可能具有这样的计算能力。没有人知道如何造出非确定性图灵机，人们没有任何头绪它如何能够存在。
&#13;
    所以 “P vs NP” 这个 问题的定义，是基于一个完全假想的机器——非确定性图灵机。既然是假象的机器，为什么一定要是“非确定图灵机”呢？为什么不可以是其它具有超能力的东西？
&#13;
    仔细想想吧，“非确定性图灵机”对于现实的意义，就跟 Hogwarts 魔法学校和哈利波特对于现实的意义一样。我们为什么不研究“P vs HP”呢，其中 H 代表 Harry Potter。HP 定义为：哈利波特能够在多项式时间解决的问题。
&#13;
    “P vs NP”问题：请问那些需要非确定性图灵机（超能力计算机）在多项式时间才能解决的问题，能够用确定性图灵机（普通计算机）在多项式时间解决吗？
&#13;
    “P vs HP”问题：请问那些需要哈利波特在多项式时间才能解决的问题，能够用确定性图灵机（普通计算机）在多项式时间解决吗？
&#13;
    我不是开玩笑，仔细回味一下 “P vs NP” 和 “P vs HP” 的相似**。也许你会跟我一样意识到 NP 这个概念本身就是虚无的。我不明白“一个不存在的机器能在多项式时间解决的问题”，这样的说法有何意义，基于它的理论又有什么科学价值。
&#13;
    非确定性图灵机存在的意义，也许只是因为它可以被证明等价于其它一些常见的问题，比如 SAT。计算理论书籍一般在证明 SAT 与 非确定性图灵机等价性之后，就完全抛掉了非确定性图灵机，之后的等价性证明都是通过 SAT 来进行。
&#13;
    我觉得 NP 这个概念其实是在故弄玄虚。我们完全可以从 SAT 本身出发去发展这个理论，而不需要设想一个具有超能力的机器。我们可以有一个问题叫做“P vs SAT”，而不出现 NP 这个概念。
&#13;
（有点扯远了）
&#13;
其它质疑 P vs NP 价值的人
&#13;
    有人认为我质疑 P vs NP 的价值是一知半解信口开河，然而我并不是第一个质疑它的人。很多人对 P vs NP 都有类似的疑惑，但因为这个问题的地位如此之高，没人敢站出来。只要你开口，一群人就会居高临下指责你基础课程没学好，说你眼界太窄…… 再加上那一堆纷繁复杂基于图灵机的证明，让你有苦说不出。
&#13;
    由于这个原因，我从来没敢公开表达我的观点，直到我发现 Doron Zeilberger 的这篇文章。Zeilberger 是个数学家，Rutgers 大学的数学系教授。在那之前他开了个玩笑，戏称自己证明了 P=NP，还写了篇像模像样的论文。在文章里他告诫大家：不要爱上你的模型（Don’t Fall In Love With Your Model）。他这句话说到了我心里。
&#13;
    你还能在网络上找到其它人对“P vs NP”的质疑，比如这篇来自于一位专门研究计算理论的学者：Is P=NP an Ill Posed Problem?
&#13;
    我觉得他讲的也很在理。正是在这些人的鼓舞之下，我随手写出了之前对“P vs NP” 的质疑。只言片语里面，融入了我多年的深入学习，研究和思考。
&#13;
总结
&#13;
    看这篇文章很累吧？我写着也累。对于我来说这一切都已经那么明了，真的不想费口舌。但是既然之前已经说出来了，为了避免误解，我仍然决定把这些东西写下来摆在这里。如果你暂时看不懂可以先放在一边，等到了需要深入研究计算理论，想得头痛的时候再来看。你也许会感谢我。
&#13;
    我希望严谨的计算机科学工作者能够理解我在说什么，反思一下对“P vs NP”的理解。计算机专业的学生应该理解“P vs NP”理论，但不必沉迷其中。这并不是一个值得付出毕生精力去解决的问题。计算机科学里面还有其它许多有趣而重要的问题需要你们去探索。如果你觉得计算机科学都不过瘾，你可以去证明黎曼猜想啊 :)
&#13;
    当然所有这些都是我的个人观点，我没有强求任何人接受它们。强迫别人接受自己的观点是不可以的，但想阻止别人表达对此类问题的质疑，也是不可以的，因为我们生活在自由的世界。
&#13;
没人想抢走你们的玩具，但不要忘了，它只是玩具。</description>
      <content:encoded><![CDATA[<p><b>overflowal: </b><br>
<span>yinwang:再谈“P vs NP”问题</span><br>
<span> 本帖最后由 overflowal 于 2019-8-16 13:57 编辑 </span><br>
<span>    好几年前曾经写过一篇文章表达对计算机科学里著名的 “P vs NP” 问题的看法。当时正值我人生中第 N 次研究那些东西，由于看透了却不在乎，所以写得特别简略。没想到有人看到后，还以为我没仔细学过复杂度理论，说我信口开河。我一般懒得谈论这种太理论的问题，身边也很少有人关心，所以后来干脆把文章撤了。不是我说的有什么不对，而是我懒得跟人争论。</span><br>
<span>    没想到最近又遇到有人抓住我删掉的文章，乘机拿出来贬损我，尽其羞辱之能力。说王垠你太自以为是了，你知不知道“P vs NP”要是解决了，世界将有天翻地覆的变化，多少的计算难题会被解决，机器学习都没必要了，非对称加密全都被破解…… 跟上课似的头头是道滔滔不绝，几乎把他本科算法课本上的内容给我背了一遍，以为别人不知道一样，却没有显示出任何他自己的思想。</span><br>
<span>    呃，我真是服了某些人背书冒术语的能力，难怪能做国内某大厂的 P10（注：不是我的在职公司）。鉴于很多人对此类问题的一知半解，反倒嘲笑别人不懂，牛逼轰轰打压其他人，我决定事后把这个问题再详细讲一下，免得以后还要为它费口舌。</span><br>
<span>    对于初学者这篇文章有点门槛，需要学习一些东西。“P vs NP” 问题属于计算理论（Theory of Computation）的一部分——复杂度理论。计算理论不止包括复杂度理论（Complexity），还包括可计算性（Computability），也就是“停机问题”一类的内容。</span><br>
<span>    国内大学的计算机教学一般在算法课上对复杂度理论有初级的讲授，但很少人能够真的理解。如果你没有系统的学习过复杂度理论，我建议你研读一下计算理论的专著（而不是普通的算法教材），比如 Michael Sipser 的『Introduction to the Theory of Computation』。</span><br>
<span>    我当年在 Indiana 做研究生计算理论课助教的时候，可算是把这书给看透了…… 被逼的。其中“可计算性理论”在我将来的 PL 研究中起了比较大的启发作用，而复杂度理论的用处一般。我觉得 Sipser 的书写的不够清晰透彻，但很多学校拿它做教材，好像也没有其它特别好的替代品。</span><br>
<span>    计算理论如此晦涩难懂，我认为图灵机是祸首。如果你能理解 lambda calculus，将会简化理解计算理论的过程。如果你想用更深刻更容易的方法理解计算理论，可以参考这篇文章的“Lambda 演算与计算理论”一节，里面会提到另一本参考书。从这篇文章你也可以看出来，我丝毫不崇拜图灵。</span><br>
<span>“P vs NP” 真的重要吗？</span><br>
<span>    “P vs NP” 这个问题有它的理论价值，它是有趣的问题，里面的有些思路有启发意义，值得花些时间来了解。但计算机科学界长久以来都严重夸大它的重要性，把一个很普通的问题捧上了天，吹得神乎其神。</span><br>
<span>再加上图灵机模型在计算理论界的广泛使用，使得这门学问显得异常艰深。很多人看到图灵机就晕了，在课程上蒙混过关，考试完了就全忘了，根本无法理解里面的实质内容。正是因为很多人的不明觉厉，使得“P vs NP”登上了它在 CS 界的宝座。</span><br>
<span>    很多人做了一辈子计算机工作，做了很多巧妙的设计构架，写了许许多多的代码，解决了很多性能难题。提到“P vs NP”，虽然一辈子都没用上这个理论，仍然顶礼膜拜。由此可见“不明觉厉”对于人们心理的威力。</span><br>
<span>    很多人认为“P vs NP”是计算机科学最重要的问题。Clay 数学研究所甚至悬赏一百万美元解决这个问题，把它叫做数学界的 7 个千年难题之一，跟黎曼猜想并列其中。</span><br>
<span>    好几次有人声称解决了“P vs NP”，上了新闻，闹得舆论沸沸扬扬，小编们吹得好像世界要天翻地覆了一样，把他们追捧为天才苦行僧，后来却又发现他们的结果是错的……</span><br>
<span>    如果你真的理解了“P vs NP”的内涵，就会发现这一切都是闹剧。这个问题即使得到解决，也不能给世界带来很大变化。解决这个问题对于现实的计算，作用是微乎其微的。不管 P 是否等价于 NP，我们遇到的计算问题的难度不会因此有重大改变。</span><br>
<span>    甚至有些数学家认为“P vs NP” 根本没有资格跟黎曼猜想一起并列于“千禧年问题”。我倒是希望有人真的解决了它，这样我们就可以切实的看到这有什么意义。</span><br>
<span>    “P vs NP” 也许不是愚蠢的问题，但计算机科学界几十年以来夸大它的重要性的做法，是非常愚蠢的，让整个领域蒙羞。</span><br>
<span>真正重要的数学问题被解决，应该对现实世界具有强大的作用。这种作用可以是“潜在的”，它的应用可以发生在很久以后的将来，但这必须能够被预见到。数学家们把这叫做“applicable result”（注意不叫 applied 或者 practical）。否则这个数学问题就只能被叫做“有理论价值”，“有趣”，而不能叫做“重要”。即使所谓“纯数学”，也应该有可以预见的效果。</span><br>
<span>    很多数学家都明白黎曼猜想（Riemann hypothesis）的重要性。大数学家希尔伯特说过：“如果我沉睡了三千年醒过来，我的第一句话会是‘黎曼猜想被解决了吗？’” 假设希尔伯特还在世，他会对解决“P vs NP”有同样的渴望吗？我觉得不会。实际上，很多数学家都觉得“P vs NP”的重要性根本没法和黎曼猜想相提并论，因为我们预见不到它会产生任何重要的效果。</span><br>
<span>什么是多项式时间？</span><br>
<span>    很多人提到“P vs NP”就会跟你吹嘘，P 如果等于 NP，世界将有天翻地覆的变化。许许多多我们以前没法办到的事情，都将成为现实。非对称加密技术会被破解，生物化学将得到飞跃，机器学习将不再有必要……</span><br>
<span>    这些人都忽略了一个重要的问题：什么是多项式时间。盲目的把“多项式”等同于“容易”和“高效”，导致了对 “P vs NP” 重要性的严重夸大。</span><br>
<span>    n100 是不是多项式？是的。n1000000 也是多项式。n100100 也是多项式，n100100100 也是多项式…… 实际上，只要 n 的指数是常数，它就是一个多项式，而 n 的指数可以是任意大的常数！n 的指数可以是任意大的常数！n 的指数可以是任意大的常数！重要的事情说三遍。</span><br>
<span>    时间复杂度 n100100100 的算法，能用吗？所以即使 P=NP，你需要的计算时间仍然可以是宇宙毁灭 N 次，其中 N 是任意的常数。</span><br>
<span>    说到这里，又会有人跟我说你不懂，当 n 趋近于无穷的时候，非多项式总会在某个时候超越多项式，所以当 n “足够大”的时候，多项式时间的算法总是会更好。很可惜，“无穷”对于现实的问题是没有意义的。任何被叫做“重要”的问题，都应该在合理的时间内得到结果。</span><br>
<span>    我们关心的要点不应该是“足够大”，而是“具体要多大”。精确的量化，找到实际可以用的区间，这才是合格的科学家该有的思路。计算机科学里，大 O 表示法泛滥成灾，只看最高次幂，忽略系数和常数项，也是常见的误区。我也曾经沉迷于如何把 O(n3) 的算法降低到 O(n2.9)，现在回头才发现当年是多么的幼稚。</span><br>
<span>    “多项式时间”这个概念太宽泛太笼统。以如此笼统的概念为基础的理论，不可能对现实的计算问题产生意义。我们关心的不应该仅仅是“是否多项式”，而是“具体是什么样的多项式”。6n20 + 26n7 + 200，1000n3 + 8n2 + 9，…… 每一个多项式的曲线都是很不一样的，在各个区间它们的差别也是不一样的。多项式的幂，系数，常数项，它们的不同都会产生重大的差异。</span><br>
<span>    这就是为什么“P=NP”没有很大意义，因为 P 本身太笼统，其内部的差异可以是天壤之别。与其试图笼统的证明 P 等价于 NP，还不如为具体的问题想出实质意义上高效的算法，精确到幂，系数，常数项。</span><br>
<span>P!=NP 有意义吗？</span><br>
<span>    “P vs NP”问题有两种可能性：P=NP（等价），或者 P!=NP（不等价）。以上我说明了 P=NP 的意义不大，那么要是 P!=NP 呢？</span><br>
<span>    很多人会跟你说，要是一个问题是 NP-Hard，然后又有 P!=NP，那么我们就知道这个问题没有多项式时间的算法存在，就避免了为多项式时间算法浪费时间了。这不也有一些价值吗？</span><br>
<span>    我并没有否认 P!=NP 是有那么一点价值：在某些时候它也许避免了浪费时间。但这种价值比较小，而且它具有误导性。</span><br>
<span>    一个常见的 NP-Hard 问题是 SAT。如果 P!=NP，那么大家就应该放弃为它找到高效的算法吗？如果大家都这样想，那么现在的各种高效的 SAT solver 就不存在了。实际上，利用随机算法，我们在大多数时候都能比较快的解决 SAT 问题。</span><br>
<span>    问题在于，“P vs NP”关心的只是“最坏情况”，而最坏情况也许非常罕见。有些问题大部分实际的情况都可以高效的解决，只有少数变态的情况会出现非常高的复杂度。为了这少数情况放弃大多数，这就是“P vs NP”的误导。</span><br>
<span>    如果因为 P!=NP，你认为 NP-Hard 的问题就没有高效的算法，那你也许会误以为你可以利用这些“难题”来做非对称加密。然而 NP-Hard 并不等于没法快速解决，所以要是你因此被误导，也许会设计出有漏洞的加密算法。</span><br>
<span>    即使 P!=NP，我们仍然不能放弃寻找重要的 NP-Hard 问题的高效算法，所以确切的证明 P!=NP 的价值也不是那么重要了。其实你只要知道 P=NP “大概不可能”，就已经能起到“节省时间”的目的了。你没必要证明它。</span><br>
<span>什么是 NP？</span><br>
<span>    这一节我来讲讲“P vs NP”里的“NP”到底是什么。内容比较深，看不懂的人可以跳过。</span><br>
<span>    很多人都没搞明白 NP 是什么就开始夸夸其谈“P vs NP”的价值。 经常出现的错误，是把 NP 等同于“指数时间”。实际上 NP 代表的是“Nondeterministic Polynomial time”，也就是“非确定性图灵机”（nondeterministic Turing machine）能在多项式时间解决的那些问题。</span><br>
<span>    什么是“非确定性图灵机”？如果你把课本上那堆图灵机的定义看明白看透了，然后又理解了程序语言理论，你会发现所谓“非确定性图灵机”可以被很简单的解释。</span><br>
<span>    你可以把我们通常用到的程序看作是“确定性图灵机”（deterministic Turing machine）。它们遇到条件分支，在同一个时刻只能走其中一条路，不能两边同时探索。</span><br>
<span>    那么“非确定性图灵机”呢？你可以把“非确定性图灵机”想象成一个具有“超能力”的计算机，它遇到分支语句的时候，可以同时执行 True 和 False 两个分支。它能够同时遍历任意多的程序分支，这是一台具有超能力的机器！</span><br>
<span>    所以“P vs NP”的含义大概就是这样：请问那些需要非确定性图灵机（超能力计算机）在多项式时间才能解决的问题，能够用确定性图灵机（普通计算机）在多项式时间解决吗？</span><br>
<span>    现在问题来了，具有如此超能力的机器存在吗？答案当然是“No！” 就算是量子计算机做成功了，也不可能具有这样的计算能力。没有人知道如何造出非确定性图灵机，人们没有任何头绪它如何能够存在。</span><br>
<span>    所以 “P vs NP” 这个 问题的定义，是基于一个完全假想的机器——非确定性图灵机。既然是假象的机器，为什么一定要是“非确定图灵机”呢？为什么不可以是其它具有超能力的东西？</span><br>
<span>    仔细想想吧，“非确定性图灵机”对于现实的意义，就跟 Hogwarts 魔法学校和哈利波特对于现实的意义一样。我们为什么不研究“P vs HP”呢，其中 H 代表 Harry Potter。HP 定义为：哈利波特能够在多项式时间解决的问题。</span><br>
<span>    “P vs NP”问题：请问那些需要非确定性图灵机（超能力计算机）在多项式时间才能解决的问题，能够用确定性图灵机（普通计算机）在多项式时间解决吗？</span><br>
<span>    “P vs HP”问题：请问那些需要哈利波特在多项式时间才能解决的问题，能够用确定性图灵机（普通计算机）在多项式时间解决吗？</span><br>
<span>    我不是开玩笑，仔细回味一下 “P vs NP” 和 “P vs HP” 的相似**。也许你会跟我一样意识到 NP 这个概念本身就是虚无的。我不明白“一个不存在的机器能在多项式时间解决的问题”，这样的说法有何意义，基于它的理论又有什么科学价值。</span><br>
<span>    非确定性图灵机存在的意义，也许只是因为它可以被证明等价于其它一些常见的问题，比如 SAT。计算理论书籍一般在证明 SAT 与 非确定性图灵机等价性之后，就完全抛掉了非确定性图灵机，之后的等价性证明都是通过 SAT 来进行。</span><br>
<span>    我觉得 NP 这个概念其实是在故弄玄虚。我们完全可以从 SAT 本身出发去发展这个理论，而不需要设想一个具有超能力的机器。我们可以有一个问题叫做“P vs SAT”，而不出现 NP 这个概念。</span><br>
<span>（有点扯远了）</span><br>
<span>其它质疑 P vs NP 价值的人</span><br>
<span>    有人认为我质疑 P vs NP 的价值是一知半解信口开河，然而我并不是第一个质疑它的人。很多人对 P vs NP 都有类似的疑惑，但因为这个问题的地位如此之高，没人敢站出来。只要你开口，一群人就会居高临下指责你基础课程没学好，说你眼界太窄…… 再加上那一堆纷繁复杂基于图灵机的证明，让你有苦说不出。</span><br>
<span>    由于这个原因，我从来没敢公开表达我的观点，直到我发现 Doron Zeilberger 的这篇文章。Zeilberger 是个数学家，Rutgers 大学的数学系教授。在那之前他开了个玩笑，戏称自己证明了 P=NP，还写了篇像模像样的论文。在文章里他告诫大家：不要爱上你的模型（Don’t Fall In Love With Your Model）。他这句话说到了我心里。</span><br>
<span>    你还能在网络上找到其它人对“P vs NP”的质疑，比如这篇来自于一位专门研究计算理论的学者：Is P=NP an Ill Posed Problem?</span><br>
<span>    我觉得他讲的也很在理。正是在这些人的鼓舞之下，我随手写出了之前对“P vs NP” 的质疑。只言片语里面，融入了我多年的深入学习，研究和思考。</span><br>
<span>总结</span><br>
<span>    看这篇文章很累吧？我写着也累。对于我来说这一切都已经那么明了，真的不想费口舌。但是既然之前已经说出来了，为了避免误解，我仍然决定把这些东西写下来摆在这里。如果你暂时看不懂可以先放在一边，等到了需要深入研究计算理论，想得头痛的时候再来看。你也许会感谢我。</span><br>
<span>    我希望严谨的计算机科学工作者能够理解我在说什么，反思一下对“P vs NP”的理解。计算机专业的学生应该理解“P vs NP”理论，但不必沉迷其中。这并不是一个值得付出毕生精力去解决的问题。计算机科学里面还有其它许多有趣而重要的问题需要你们去探索。如果你觉得计算机科学都不过瘾，你可以去证明黎曼猜想啊 :)</span><br>
<span>    当然所有这些都是我的个人观点，我没有强求任何人接受它们。强迫别人接受自己的观点是不可以的，但想阻止别人表达对此类问题的质疑，也是不可以的，因为我们生活在自由的世界。</span><br>
<span>没人想抢走你们的玩具，但不要忘了，它只是玩具。</span><br>
</p><p><b>Livingforce: </b><br>
<span>看不懂，也许这问题很有意思？</span><br>
</p><p><b>乌鸫: </b><br>
<span>说得不算错，但也没什么意思，NP问题这么难搞，现在还在研究的人也没多少是为了实用价值吧。</span><br>
</p><p><b>乌鸫: </b><br>
<span>在圣塔菲听过一个教授的讲座说NP问题“在不同的可能世界中有不同的答案”，这是我听过最酷炫（中二）的描述了</span><br>
</p><p><b>prattwhitney: </b><br>
<span>其实仔细一遍看下来yinwang也没说错，他的几个疑问都是计算理论界的通常说法</span><br>
<span>问题在于yinwang那个臭屁的语气把计算理论界的常识就转换为他自己多不得了的证据，这个就招人烦了</span><br>
<span>他这个态度就相当于有人问他“你学计算机的能修电脑吗？”“你连电脑都不会修，学计算机干什么？”</span><br>
</p><p><b>シャスタ: </b><br>
<span>这一篇只是评论,根本不探讨问题本身,也并无实质内容.</span><br>
</p><p><b>最终兵器狂战: </b><br>
<span>只知道以前上算法课的时候日常就是一题证明np-complete撂倒一片人。当真是随缘证明。。。</span><br>
<span>-- 来自 有消息提醒的 Stage1官方 Android客户端</span><br>
</p><p><b>诚司: </b><br>
<span>王吟这态度是一般的码农对学术的常见态度，也难怪他读不下去phd。一个有追求的人，好歹一生要为人类心智的荣耀做些什么。他既然没什么追求，不这么想自然也正常</span><br>
</p><p><b>hunterkiller: </b><br>
<span>通用非确定性图灵机造不出来，专用非确定性图灵“机”是有的啊。</span><br>
</p><p><b>炽十二翼: </b><br>
<span>滥用感叹号，行文一股民科味，没有实质性内容，就字还挺多的</span><br>
</p><p><b>overflowal: </b><br>
<span>yinwang写文章的目的主要是表述一件事：我真的很牛逼</span><br>
<span>—— 来自 vivo V1911A, Android 9上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>白影: </b><br>
<span>诚司 发表于 2019-8-16 14:26</span><br>
<span>王吟这态度是一般的码农对学术的常见态度，也难怪他读不下去phd。一个有追求的人，好歹一生要为人类心智的 ...</span><br>
<span>他的追求就是别人要无条件的崇敬他</span><br>
<span>这种人我们一般当傻逼看待，他恰好也在这一般的范畴中</span><br>
</p><p><b>novem: </b><br>
<span>它有什么资格评论一个终极的学术问题？</span><br>
</p><p><b>姪乃浜kozue: </b><br>
<span>我来咬钩。看到这么个标题，本来好奇 yinwang 又有什么高论，结果一看文章前半篇（如果不是全篇）光在吹嘘有多懂计算理论图灵机什么的，不指望有人看懂啥的，后半篇脱水后的几个论点看得巨尴尬无比，还以为要掏出什么宝藏呢，稍微懂点算法理论的码农都知道你说的是常识好吧。</span><br>
<span>任何NP问题，只要解空间是可数的，本质上都可以通过有限枚举的方法解出，而无脑枚举的代价就是指数级时间，“非确定性图灵机内多项式时间”不过是给指数级时间强行换了一个好听点的名字，P!=NP就是问除了枚举这种不是方法的方法以外，有没有哪怕稍微聪明一点的方法存在的可能性。各种随机算法和启发式算法都不能保证得到最优解，也没有人会等 P!=NP问题被攻克后才去干实事，两者根本不是一个维度的问题。</span><br>
</p><p><b>hanyuwei70: </b><br>
<span>别倒垃圾，谢谢</span><br>
<span>-- 来自 能手机投票的 Stage1官方 Android客户端</span><br>
</p><p><b>uswhzh: </b><br>
<span>证明p==np，直接证明了对角线法则错误，1,0之间数字无穷。背包问题在无限范围内可解。非确定图灵机做不出来因为大部分都认为np不等于p。</span><br>
</p><p><b>R.I.P: </b><br>
<span>王垠对TCS的认识和大厂码农本来就没有太大区别</span><br>
<span>—— 来自 Meizu 16th, Android 8.1.0上的 S1Next-鹅版 v2.1.2</span><br>
</p><p><b>dogfight: </b><br>
<span>yinwang写的看不懂了，等李永乐做视频</span><br>
</p><p><b>马吃甜玉米: </b><br>
<span>惨了，我才看两行就感觉出来是yinwang的文风了。</span><br>
</p><p><b>格尔尼卡: </b><br>
<span>泥潭为啥这么喜欢转yinwang的博客？</span><br>
</p><p><b>皇帝雅西加: </b><br>
<span>因为泥潭网友对王垠是真爱啊，爱之深恨之切</span><br>
</p><p><b>黑芝麻狐: </b><br>
<span>自从他写了两章就鸽掉的"教科书"之后我就对他彻底路转黑了，毕竟我是真的赞助了100块</span><br>
</p><p><b>mimighost: </b><br>
<span>yinwang这些着实没啥看头，喷的欲望都没有</span><br>
</p><p><b>萨格诺伊: </b><br>
<span>姑妄言之，姑妄听之。</span><br>
<span>众所周知，检查一个形式化的证明需要的时间是线性的。如果能发现NP问题的有效算法，找到一个（小于某个长度）的证明需要的时间和验证的时间是可比的（当然还有把当前数学体系形式化的问题，这个算是体力活）。也就是说可以预见计算机的能力和数学家是差不多的。</span><br>
<span>智商最高的那群人要失业了，想想就开心~</span><br>
</p><p><b>青空序曲: </b><br>
<span>专业和这方面相关，感觉说的没啥问题，证明了p=np了又能如何？只是说明指数级复杂度的问题有多项式级解，但是具体怎么解又没人知道，到头来还是各种猜想，rsa加密还是解不出来</span><br>
<span>就算这个世界上有上帝，有一天突然宣布一个公理：p＝np，对这个世界也没有影响，该算不出来的还是算不出来</span><br>
<span>理论上的证明无法解决实际应用问题</span><br>
</p><p><b>诚司: </b><br>
<span>青空序曲 发表于 2019-8-16 18:01</span><br>
<span>专业和这方面相关，感觉说的没啥问题，证明了p=np了又能如何？只是说明指数级复杂度的问题有多项式级解，但 ...</span><br>
<span>重要的根本不是能不能解决掉np hard问题，而是人类连np是不是等于p都无法证明，这表明对计算理论的认识有根本缺陷</span><br>
<span>什么都要找个应用，评价有没有用，无论任何学科这么干都没有前途，以完全的功利心理，根本发展不出任何东西，唯一要考虑的是问题是不是有价值，有用只是有价值的其中之一而已</span><br>
<span>而且哪怕就在有用的方向上，如果证明np！=p，那那么密码学就是可证明可靠的，否则就是可证明不可靠的，这还不叫有用？</span><br>
</p><p><b>haryseldon: </b><br>
<span>硬要按文章里这样说的话，光看一个命题，RH做出来也不会有什么影响，千禧大奖的题都做出来也不会有什么影响，这些问题之所是千禧大奖只是因为：1.很久了都没人做出来，就是说用现有的技术基本没法解决。2.这些都是各个领域相对核心的问题。 所以，是希望通过解决这些问题，给各个领域带来新方法新技术，而这些问题又是核心的问题，所以不免期望这些新方法会对所在的领域有深远影响。像FLT就是这样的例子。</span><br>
</p><p><b>illusiome: </b><br>
<span>青空序曲 发表于 2019-8-16 18:01</span><br>
<span>专业和这方面相关，感觉说的没啥问题，证明了p=np了又能如何？只是说明指数级复杂度的问题有多项式级解，但 ...</span><br>
<span>那么证明了任何一个偶数都能表达为两个质数之和也不能立刻解决什么问题啊？</span><br>
<span>什么叫又能如何？不能如何了所以这玩意不用证明了？</span><br>
<span>你是文盲吗？</span><br>
</p><p><b>噂の船: </b><br>
<span>每当我看到s1各位大佬对什么np完全 计算复杂度高谈阔论的时候 就感觉自己是底层码农</span><br>
<span>要是当初读cs就好了..</span><br>
</p><p><b>青空序曲: </b><br>
<span>illusiome 发表于 2019-8-16 18:49</span><br>
<span>那么证明了任何一个偶数都能表达为两个质数之和也不能立刻解决什么问题啊？</span><br>
<span>什么叫又能如何？不能如何了 ...</span><br>
<span>可以证明啊，谁说不用证明了</span><br>
<span>我只是说同意淫王的这个观点而已</span><br>
</p><p><b>Phoenix_0592: </b><br>
<span>乌鸫 发表于 2019-8-16 14:21</span><br>
<span>在圣塔菲听过一个教授的讲座说NP问题“在不同的可能世界中有不同的答案”，这是我听过最酷炫（中二）的描述 ...</span><br>
<span>太酷炫了，但是究竟啥意思</span><br>
</p><p><b>Tuxr: </b><br>
<span>off topic，想起某课件上的NP-complete的冷笑话 “I will tell you an NP-complete joke, but once you've heard one you've heard them all”</span><br>
</p><p><b>某大官人: </b><br>
<span>听不懂，所有认知是《走进修仙》里面那个发疯的许愿机</span><br>
</p><p><b>yukiecho: </b><br>
<span>银王现在在国内还是回去了？abc女朋友还在吗？他到底在干嘛？他有40了吗？</span><br>
<span>发自我的iPhone via Saralin 2.1.7</span><br>
</p><p><b>聚散浮云: </b><br>
<span>我发现他的每一篇文章里都有很多不学无术的人来他面前班门弄斧，然后被他当作反面典型嘲笑。真的不是自己画靶子自己打吗？</span><br>
</p><p><b>tsubasa9: </b><br>
<span>为什么一个码农要谈论np问题, 跟他有屁关系?</span><br>
</p><p><b>martinium: </b><br>
<span>淫王就是个懂cs的段子手啊</span><br>
<span>— from Google Pixel 2, Android 9 of S1 Next Goose v2.1.0-play</span><br>
</p><p><b>dazzle: </b><br>
<span>illusiome 发表于 2019-8-16 18:49</span><br>
<span>那么证明了任何一个偶数都能表达为两个质数之和也不能立刻解决什么问题啊？</span><br>
<span>什么叫又能如何？不能如何了 ...</span><br>
<span>其实这篇意思还就真是p=np和哥德巴赫猜想类似，都是某一个领域里的孤立问题，解决了也不会立即对科学有特别大的推动</span><br>
<span>倒不是说没有解决的意义，而是CS科班出身的确实普遍对p=np和哥德尔不完备定理有一种谜之崇拜。毕竟CS是个人类自己搭起来的工程学科，难解之谜并不是那么多</span><br>
</p><p><b>infinitesimal7: </b><br>
<span>dazzle 发表于 2019-8-17 06:15</span><br>
<span>其实这篇意思还就真是p=np和哥德巴赫猜想类似，都是某一个领域里的孤立问题，解决了也不会立即对科学有特 ...</span><br>
<span>这篇文章里对于黎曼猜想和p vs np的评论是明显的双标。</span><br>
</p><p><b>7uly: </b><br>
<span>他说的完全对，尤其是里面说的优化（n^3）的地方真的是现在一个特别普遍的误区。还是那句话，在yinwang的专业领域里面，他说的基本还是靠谱的。</span><br>
</p><p><b>乌鸫: </b><br>
<span>Phoenix_0592 发表于 2019-8-16 23:56</span><br>
<span>太酷炫了，但是究竟啥意思</span><br>
<span>我不是学这个的所以也云里雾里，大意是说计算复杂性理论研究中经常假设一个预言机（oracle），但有人证明了不同的oracle对NP问题的答案可以不同。可以搜Baker-Gill-Solovay定理</span><br>
<span>以及没记错的话当时讲这个的是Cris Moore，计算复杂性领域的大牛，假想王垠在他面前大概也不敢造次吧。</span><br>
</p><p><b>白影: </b><br>
<span>yukiecho 发表于 2019-8-17 01:56</span><br>
<span>银王现在在国内还是回去了？abc女朋友还在吗？他到底在干嘛？他有40了吗？</span><br>
<span>发自我的iPhone via Saralin 2. ...</span><br>
<span>灰溜溜的回国了吧，其他不知道</span><br>
</p><p><b>ahyyk: </b><br>
<span>总结一下就是有价值，但现在很多人对这个问题崇拜过头了。说的没问题吧</span><br>
<span>至少在网上，说这个的大部分是用来装逼，比如前面说的走进修仙（当然作为小说，这么搞也没问题）</span><br>
</p>]]></content:encoded>
      <guid isPermaLink="false">1853824[0-50]</guid>
    </item>
  </channel>
</rss>
